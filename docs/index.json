{
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "articles/JsonPath/functions/abs.html": {
    "href": "articles/JsonPath/functions/abs.html",
    "title": "abs",
    "keywords": "abs number abs(number value) Returns the absolute value of a number. It is a type error if the provided argument is not a number. Examples"
  },
  "articles/JsonPath/functions/avg.html": {
    "href": "articles/JsonPath/functions/avg.html",
    "title": "avg",
    "keywords": "avg number|null avg(array[number] value) Returns the average of the items in an array of numbers, or null if the array is empty It is a type error if the provided value is not an array the array contains items that are not numbers Examples using System; using System.IO; using System.Collections.Generic; using System.Text.Json; using JsonCons.JsonPathLib; namespace JsonCons.Examples { public static class JsonPathExamples { public static void Main(string[] args) { string jsonString = @\" { \"\"books\"\": [ { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"A Wild Sheep Chase\"\", \"\"author\"\" : \"\"Haruki Murakami\"\", \"\"price\"\" : 22.72 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Night Watch\"\", \"\"author\"\" : \"\"Sergei Lukyanenko\"\", \"\"price\"\" : 23.58 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Comedians\"\", \"\"author\"\" : \"\"Graham Greene\"\", \"\"price\"\" : 21.99 }, { \"\"category\"\": \"\"fiction\"\", \"\"author\"\": \"\"J. R. R. Tolkien\"\", \"\"title\"\": \"\"The Lord of the Rings\"\" } ] } \"; using (JsonDocument doc = JsonDocument.Parse(jsonString)) { IList<JsonElement> results = JsonPath.Select(doc.RootElement, @\"$.books[?(@.price > avg($.books[*].price))].title\"); foreach (var value in results) { Console.WriteLine(value); } } } } } Output: \"The Night Watch\""
  },
  "articles/JsonPath/functions/ceil.html": {
    "href": "articles/JsonPath/functions/ceil.html",
    "title": "ceil",
    "keywords": "ceil integer ceil(number value) Returns the smallest integer value not less than the provided number. It is a type error if the provided argument is not a number. Examples using System; using System.IO; using System.Collections.Generic; using System.Text.Json; using JsonCons.JsonPathLib; namespace JsonCons.Examples { public static class JsonPathExamples { public static void Main(string[] args) { string jsonString = @\" { \"\"books\"\": [ { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"A Wild Sheep Chase\"\", \"\"author\"\" : \"\"Haruki Murakami\"\", \"\"price\"\" : 22.72 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Night Watch\"\", \"\"author\"\" : \"\"Sergei Lukyanenko\"\", \"\"price\"\" : 23.58 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Comedians\"\", \"\"author\"\" : \"\"Graham Greene\"\", \"\"price\"\" : 21.99 }, { \"\"category\"\": \"\"fiction\"\", \"\"author\"\": \"\"J. R. R. Tolkien\"\", \"\"title\"\": \"\"The Lord of the Rings\"\" } ] } \"; using (JsonDocument doc = JsonDocument.Parse(jsonString)) { IList<JsonElement> results = JsonPath.Select(doc.RootElement, @\"$.books[?(ceil(@.price*10) == 236)]\"); foreach (var value in results) { Console.WriteLine(value); } } } } } Output: { \"category\": \"fiction\", \"title\" : \"The Night Watch\", \"author\" : \"Sergei Lukyanenko\", \"price\" : 23.58 }"
  },
  "articles/JsonPath/functions/contains.html": {
    "href": "articles/JsonPath/functions/contains.html",
    "title": "contains",
    "keywords": "contains boolean contains(array|string source, any search) If source is an array, returns true if the array contains an item that is equal to the search value, false otherwise. If source is a string, returns true if the string contains a substring that is equal to the search value, false otherwise. It is a type error if the provided source is not an array or string, or the provided source is a string but the provided search value is not a string. Examples using System; using System.IO; using System.Collections.Generic; using System.Text.Json; using JsonCons.JsonPathLib; namespace JsonCons.Examples { public static class JsonPathExamples { public static void Main(string[] args) { string jsonString = @\" { \"\"books\"\": [ { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"A Wild Sheep Chase\"\", \"\"author\"\" : \"\"Haruki Murakami\"\", \"\"price\"\" : 22.72 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Night Watch\"\", \"\"author\"\" : \"\"Sergei Lukyanenko\"\", \"\"price\"\" : 23.58 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Comedians\"\", \"\"author\"\" : \"\"Graham Greene\"\", \"\"price\"\" : 21.99 }, { \"\"category\"\": \"\"fiction\"\", \"\"author\"\": \"\"J. R. R. Tolkien\"\", \"\"title\"\": \"\"The Lord of the Rings\"\" } ] } \"; using (JsonDocument doc = JsonDocument.Parse(jsonString)) { IList<JsonElement> results = JsonPath.Select(doc.RootElement, @\"$.books[?(!contains(keys(@),'price'))]\"); foreach (var value in results) { Console.WriteLine(value); } } } } } Output: { \"category\": \"fiction\", \"author\": \"J. R. R. Tolkien\", \"title\": \"The Lord of the Rings\" }"
  },
  "articles/JsonPath/functions/ends_with.html": {
    "href": "articles/JsonPath/functions/ends_with.html",
    "title": "ends_with",
    "keywords": "ends_with boolean ends_with(string source, string suffix) Returns true if the source string ends with the suffix string, otherwise false. It is a type error if the provided source is not a string, or the provided suffix is not a string Examples"
  },
  "articles/JsonPath/functions/floor.html": {
    "href": "articles/JsonPath/functions/floor.html",
    "title": "floor",
    "keywords": "floor integer floor(number value) Returns the largest integer value not greater than the given number. It is a type error if the provided argument is not a number. Examples using System; using System.IO; using System.Collections.Generic; using System.Text.Json; using JsonCons.JsonPathLib; namespace JsonCons.Examples { public static class JsonPathExamples { public static void Main(string[] args) { string jsonString = @\" { \"\"books\"\": [ { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"A Wild Sheep Chase\"\", \"\"author\"\" : \"\"Haruki Murakami\"\", \"\"price\"\" : 22.72 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Night Watch\"\", \"\"author\"\" : \"\"Sergei Lukyanenko\"\", \"\"price\"\" : 23.58 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Comedians\"\", \"\"author\"\" : \"\"Graham Greene\"\", \"\"price\"\" : 21.99 }, { \"\"category\"\": \"\"fiction\"\", \"\"author\"\": \"\"J. R. R. Tolkien\"\", \"\"title\"\": \"\"The Lord of the Rings\"\" } ] } \"; using (JsonDocument doc = JsonDocument.Parse(jsonString)) { IList<JsonElement> results = JsonPath.Select(doc.RootElement, @\"$.books[?(floor(@.price*10) == 235)]\"); foreach (var value in results) { Console.WriteLine(value); } } } } } Output: { \"category\": \"fiction\", \"title\" : \"A Wild Sheep Chase\", \"author\" : \"Haruki Murakami\", \"price\" : 22.72 }"
  },
  "articles/JsonPath/functions/keys.html": {
    "href": "articles/JsonPath/functions/keys.html",
    "title": "keys",
    "keywords": "keys array[string] keys(object value) Returns an array of keys in the object. It is a type error if the provided argument is not an object. Example using System; using System.IO; using System.Collections.Generic; using System.Text.Json; using JsonCons.JsonPathLib; namespace JsonCons.Examples { public static class JsonPathExamples { public static void Main(string[] args) { string jsonString = @\" { \"\"books\"\": [ { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"A Wild Sheep Chase\"\", \"\"author\"\" : \"\"Haruki Murakami\"\", \"\"price\"\" : 22.72 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Night Watch\"\", \"\"author\"\" : \"\"Sergei Lukyanenko\"\", \"\"price\"\" : 23.58 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Comedians\"\", \"\"author\"\" : \"\"Graham Greene\"\", \"\"price\"\" : 21.99 }, { \"\"category\"\": \"\"fiction\"\", \"\"author\"\": \"\"J. R. R. Tolkien\"\", \"\"title\"\": \"\"The Lord of the Rings\"\" } ] } \"; using (JsonDocument doc = JsonDocument.Parse(jsonString)) { IList<JsonElement> results = JsonPath.Select(doc.RootElement, @\"$.books[?(tokenize(@.author,'\\\\s+')[-1] == 'Tolkien')]\"); foreach (var value in results) { Console.WriteLine(value); } } } } } Output: { \"category\": \"fiction\", \"author\": \"J. R. R. Tolkien\", \"title\": \"The Lord of the Rings\" }"
  },
  "articles/JsonPath/functions/length.html": {
    "href": "articles/JsonPath/functions/length.html",
    "title": "length",
    "keywords": "length integer|null length(array|object|string value) Returns the length of an array, object or string. If array, returns the number of items in the array If object, returns the number of key-value pairs in the object If string, returns the number of codepoints in the string Otherwise, returns null. Examples using System; using System.IO; using System.Collections.Generic; using System.Text.Json; using JsonCons.JsonPathLib; namespace JsonCons.Examples { public static class JsonPathExamples { public static void Main(string[] args) { string jsonString = @\" { \"\"books\"\": [ { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"A Wild Sheep Chase\"\", \"\"author\"\" : \"\"Haruki Murakami\"\", \"\"price\"\" : 22.72 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Night Watch\"\", \"\"author\"\" : \"\"Sergei Lukyanenko\"\", \"\"price\"\" : 23.58 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Comedians\"\", \"\"author\"\" : \"\"Graham Greene\"\", \"\"price\"\" : 21.99 }, { \"\"category\"\": \"\"fiction\"\", \"\"author\"\": \"\"J. R. R. Tolkien\"\", \"\"title\"\": \"\"The Lord of the Rings\"\" } ] } \"; using (JsonDocument doc = JsonDocument.Parse(jsonString)) { IList<JsonElement> results3 = JsonPath.Select(doc.RootElement, @\"$.books[?(@.price > sum($.books[*].price)/length($.books[*].price))].title\"); foreach (var value in results3) { Console.WriteLine(value); } } } } } Output: \"The Night Watch\""
  },
  "articles/JsonPath/functions/max.html": {
    "href": "articles/JsonPath/functions/max.html",
    "title": "max",
    "keywords": "max number|string|null max(array[number]|array[string] value) Returns the highest number found in an array of numbers, or the highest string in an array of strings, or null if the array is empty. It is a type error if the provided value is not an array the array contains items that are not all numbers or all strings Examples"
  },
  "articles/JsonPath/functions/min.html": {
    "href": "articles/JsonPath/functions/min.html",
    "title": "min",
    "keywords": "min number|string|null min(array[number]|array[string] value) Returns the lowest number found in an array of numbers, or the lowest string in an array of strings, or null if the array is empty It is a type error if the provided value is not an array the array contains items that are not all numbers or all strings Examples"
  },
  "articles/JsonPath/functions/prod.html": {
    "href": "articles/JsonPath/functions/prod.html",
    "title": "prod",
    "keywords": "prod number|null avg(array[number] value) Returns the product of the items in an array of numbers, or null if the array is empty. It is a type error if the provided value is not an array the array contains items that are not numbers Examples"
  },
  "articles/JsonPath/functions/starts_with.html": {
    "href": "articles/JsonPath/functions/starts_with.html",
    "title": "starts_with",
    "keywords": "starts_with boolean starts_with(string source, string prefix) Returns true if the source string starts with the prefix string, otherwise false. It is a type error if the provided source is not a string, or the provided prefix is not a string Examples"
  },
  "articles/JsonPath/functions/sum.html": {
    "href": "articles/JsonPath/functions/sum.html",
    "title": "sum",
    "keywords": "sum number sum(array[number] value) Returns the sum of the items in an array of numbers. Returns 0 if the array is empty. It is a type error if any item in the array is not a number. Examples using System; using System.IO; using System.Collections.Generic; using System.Text.Json; using JsonCons.JsonPathLib; namespace JsonCons.Examples { public static class JsonPathExamples { public static void Main(string[] args) { string jsonString = @\" { \"\"books\"\": [ { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"A Wild Sheep Chase\"\", \"\"author\"\" : \"\"Haruki Murakami\"\", \"\"price\"\" : 22.72 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Night Watch\"\", \"\"author\"\" : \"\"Sergei Lukyanenko\"\", \"\"price\"\" : 23.58 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Comedians\"\", \"\"author\"\" : \"\"Graham Greene\"\", \"\"price\"\" : 21.99 }, { \"\"category\"\": \"\"fiction\"\", \"\"author\"\": \"\"J. R. R. Tolkien\"\", \"\"title\"\": \"\"The Lord of the Rings\"\" } ] } \"; using (JsonDocument doc = JsonDocument.Parse(jsonString)) { IList<JsonElement> results3 = JsonPath.Select(doc.RootElement, @\"$.books[?(@.price > sum($.books[*].price)/length($.books[*].price))].title\"); foreach (var value in results3) { Console.WriteLine(value); } } } } } Output: \"The Night Watch\""
  },
  "articles/JsonPath/functions/to_number.html": {
    "href": "articles/JsonPath/functions/to_number.html",
    "title": "to_number",
    "keywords": "to_number number to_number(string|number value) If string, returns the parsed number. If number, returns the passed in value. It is a type error if the provided value is not a string or number the string cannot be parsed as a number Examples"
  },
  "articles/JsonPath/functions/tokenize.html": {
    "href": "articles/JsonPath/functions/tokenize.html",
    "title": "tokenize",
    "keywords": "tokenize array[string] tokenize(string source, string pattern) Returns an array of strings formed by splitting the source string into an array of strings, separated by substrings that match the given regular expression pattern. It is a type error if either argument is not a string. Example using System; using System.IO; using System.Collections.Generic; using System.Text.Json; using JsonCons.JsonPathLib; namespace JsonCons.Examples { public static class JsonPathExamples { public static void Main(string[] args) { string jsonString = @\" { \"\"books\"\": [ { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"A Wild Sheep Chase\"\", \"\"author\"\" : \"\"Haruki Murakami\"\", \"\"price\"\" : 22.72 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Night Watch\"\", \"\"author\"\" : \"\"Sergei Lukyanenko\"\", \"\"price\"\" : 23.58 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Comedians\"\", \"\"author\"\" : \"\"Graham Greene\"\", \"\"price\"\" : 21.99 }, { \"\"category\"\": \"\"fiction\"\", \"\"author\"\": \"\"J. R. R. Tolkien\"\", \"\"title\"\": \"\"The Lord of the Rings\"\" } ] } \"; using (JsonDocument doc = JsonDocument.Parse(jsonString)) { IList<JsonElement> results = JsonPath.Select(doc.RootElement, @\"$.books[?(tokenize(@.author,'\\\\s+')[-1] == 'Tolkien')]\"); foreach (var value in results) { Console.WriteLine(value); } } } } } Output: { \"category\": \"fiction\", \"author\": \"J. R. R. Tolkien\", \"title\": \"The Lord of the Rings\" }"
  },
  "articles/JsonPath/grammer.html": {
    "href": "articles/JsonPath/grammer.html",
    "title": "",
    "keywords": "absolute-path = \"$\" [relative-path] relative-path = sub-path / bracket-specifier sub-path = relative-path . (identifier / \"*\") qualified path = recursive-location / relative-location recursive-location = \"..\" relative-path relative-location \".\" relative-path relative-path = step qualified-path"
  },
  "articles/JsonPath/JsonConsJsonPath.html": {
    "href": "articles/JsonPath/JsonConsJsonPath.html",
    "title": "JsonCons JSONPath",
    "keywords": "JsonCons JSONPath JSONPath is a loosely standardized syntax for querying JSON. There are many implementations that differ significantly, see Christoph Burgmer's JSONPath comparison . The JsonCons implementation differs from Stefan Goessner's original JavaScript implementation in the following respects: Stefan Goessner's implemention returns false in case of no match, but in a note he suggests an alternative is to return an empty array. The JsonCons implementation returns an empty array in case of no match. Names in the dot notation may be unquoted (no spaces), single-quoted, or double-quoted. Names in the square bracket notation may be single-quoted or double-quoted. Wildcards are allowed in the dot notation Unions of separate JSONPath expressions are allowed, e.g. $..[@.firstName,@.address.city] Fiter expressions, e.g. $..book[?(@.price<10)] , may omit the enclosing parentheses, like so $..book[?@.price<10] . A parent operator ^ provides access to the parent node. Options are provided to exclude results corresponding to duplicate paths, and to sort results according to paths. Paths Duplicates and ordering Slices Unions Parent operator Filter expressions Functions Paths JSONPath uses paths to select values. It is a feature of JSONPath that it selects values in the original JSON document, and does not create JSON elements that are not in the original. Selector Description $ Represents the root JSON value @ Represents the value currently being processed .<name> or .'<name>' or .\"<name>\" The '.' character followed by a JSON object member name, unquoted or quoted ['<name>'] or [\"<name>\"] Subscript operator with quoted JSON object member name [<index>] Index expression used to access elements in a JSON array. A negative index value indicates that indexing is relative to the end of the array. * or ['*'] Wildcard. All objects/elements regardless their names. [start:stop:step] Array slice notation, following Python ^ Parent operator borrowed from JSONPath Plus .. Recursive descent [,] Union operator for alternative object names or array indices or JSONPath expressions ?<expr> Filter by expression Paths can use the dot-notation or the bracket-notation. Select the first (indexed 0) book in Stefan Goessner's store using the dot notation: $.store.book[0] or $.'store'.'book'[0] or $.\"store\".\"book\"[0] The leading $ represents the root JSON value. Unquoted names in the dot notation are restricted to digits 0-9, letters A-Z and a-z, the underscore character _, and unicode coded characters that are non-ascii. Note that names with hyphens must be quoted. Select the first (indexed 0) book using the bracket-notation: $['store']['book'][0] or $[\"store\"][\"book\"][0] Recursively select all book titles under '$.store': $.'store'..'title' Union of a subset of books identified by index: $.store[@.book[0],@.book[1],@.book[3]] Union of the fourth book and all books with price > 10: $.store[@.book[3],@.book[?(@.price > 10)]] Duplicates and ordering Consider the JSON document { \"books\": [ { \"title\" : \"A Wild Sheep Chase\", \"author\" : \"Haruki Murakami\" }, { \"title\" : \"The Night Watch\", \"author\" : \"Sergei Lukyanenko\" }, { \"title\" : \"The Comedians\", \"author\" : \"Graham Greene\" }, { \"title\" : \"The Night Watch\", \"author\" : \"Phillips, David Atlee\" } ] } with selector $.books[1,1,3].title Note that the second book, The Night Watch by Sergei Lukyanenko, is selected twice. The majority of JSONPath implementations will produce (with duplicate paths allowed): Path Value $['books'][1]['title'] \"The Night Watch\" $['books'][1]['title'] \"The Night Watch\" $['books'][3]['title'] \"The Night Watch\" A minority will produce (with duplicate paths excluded): Path Value $['books'][1]['title'] \"The Night Watch\" $['books'][3]['title'] \"The Night Watch\" The JsonPath.Select functions default to allowing duplicates, but have an option for no duplicates. By default, the ordering of results is unspecified, although the user may expect array ordering at least to be preserved. The JsonPath.Select functions provide an option for sorting results by paths. Slices JsonCons jsonpath slices have the same semantics as Python slices The syntax for a slice is [start:stop:step] Each component is optional. If start is omitted, it defaults to 0 if step is positive, or the end of the array if step is negative. If stop is omitted, it defaults to the length of the array if step is positive, or the beginning of the array if step is negative. If step is omitted, it defaults to 1 . Slice expression Description [start:stop] Items start through stop-1 [start:] Items start to the end of the array [:stop] Items from the beginning of the array through stop-1 [:] All items [start:stop:step] Items start up to but not including stop , by step A component start , stop , or step may be a negative number. Example Description $[-1] Last item $[-2:] Last two items $[:-2] All items except the last two $[::-1] All items, reversed $[1::-1] First two items, reversed $[:-3:-1] Last two items, reversed $[-3::-1] All items except the last two, reversed Unions In JsonCons, a JSONPath union element can be an index or slice expression a single quoted name a double quoted name a filter a wildcard, i.e. * a path relative to the root of the JSON document (begins with $ ) a path relative to the current value being processed (begins with @ ) To illustrate, the path expression below selects the first and second titles, the last, and the third from Stefan Goessner's store : \"$.store.book[0:2,-1,?(@.author=='Herman Melville')].title\" Parent operator Consider the JSON document [ { \"author\" : \"Haruki Murakami\", \"title\": \"A Wild Sheep Chase\", \"reviews\": [{\"rating\": 4, \"reviewer\": \"Nan\"}] }, { \"author\" : \"Sergei Lukyanenko\", \"title\": \"The Night Watch\", \"reviews\": [{\"rating\": 5, \"reviewer\": \"Alan\"}, {\"rating\": 3,\"reviewer\": \"Anne\"}] }, { \"author\" : \"Graham Greene\", \"title\": \"The Comedians\", \"reviews\": [{\"rating\": 4, \"reviewer\": \"Lisa\"}, {\"rating\": 5, \"reviewer\": \"Robert\"}] } ] JsonCons supports the parent operator, ^ , borrowed from JSONPath Plus , that allows you to select book objects based on criteria applied to descendent values. Query Output paths $[*]reviews[?(@.rating == 5)] \"$[1]['reviews'][0]\" \"$[2]['reviews'][1]\" $[*]reviews[?(@.rating == 5)]^ \"$[1]['reviews']\" \"$[2]['reviews']\" $[*]reviews[?(@.rating == 5)]^^ \"$[1]\" \"$[2]\" The JSONPath expression $[*].reviews[?(@.rating == 5)]^^ selects all the book objects that have ratings of 5: [ { \"author\": \"Sergei Lukyanenko\", \"reviews\": [ { \"rating\": 5, \"reviewer\": \"Alan\" }, { \"rating\": 3, \"reviewer\": \"Anne\" } ], \"title\": \"The Night Watch\" }, { \"author\": \"Graham Greene\", \"reviews\": [ { \"rating\": 4, \"reviewer\": \"Lisa\" }, { \"rating\": 5, \"reviewer\": \"Robert\" } ], \"title\": \"The Comedians\" } ] Filter expressions JSONPath uses filter expressions [?<expr>] to restrict the set of nodes returned by a path, e.g. $..book[?(@.price<10)] returns the books with prices less than 10. Filter expressions are applied to each element in a JSON array or each member in a JSON object. The symbol @ represents the value currently being processed. An expression evaluates to true or false, if true, the array element, or value part of an object member, is selected. An expression is considered false if it evaluates to any of the following values: empty array: [], empty object: {}, empty string: \"\", false, null, zero. It is considered true if it is not false. Stefan Goessner's JSONPath does not provide any specification for the allowable filter expressions, simply stating that expressions can be anything that the underlying script engine can handle. JsonCons expressions support the following comparision and arithmetic operators. Binary operators Operator Description * Left times right / Left divided by right % Remainder + Left plus right - Left minus right && Left is true and right is true || Left is true or right is true == Left is equal to right != Left is not equal to right < Left is less than right <= Left is less than or equal to right > Left is greater than right >= Left is greater than or equal to right =~ Left matches regular expression, e.g. [?(@.author =~ /Evelyn.*?/)] The ordering operators > , >= , < , <= are only valid if both left and right are numbers, or if both left and right are strings. Otherwise the item will be excluded from the result set. Unary operators Operator Description ! Negate right - Unary minus Operator precedence Precedence Operator Associativity 1 ! unary - Right 2 =~ Left 3 * / % Left 4 + - Left 5 < > <= >= Left 6 == != Left 7 && Left 8 || Left The precedence rules may be overriden with explicit parentheses, e.g. (a || b) && c. Functions Support for function in filter expressions is a JsonCons extension. Functions can be passed JSONPath paths, single quoted strings, literal JSON values such as 1.5 , true , or {\"foo\" : \"bar\"} , or expressions such as @.price*10 . Functions can be passed either a path that selects from the root JSON value $ , or a path that selects from the current node @ . Function Description abs Returns the absolute value of a number. avg Returns the average of the items in an array of numbers. ceil Returns the smallest integer value not less than a given number. contains Returns true if a source array contains a search value, or a source string contains a search string. ends_with Returns true if the source string ends with the suffix string, otherwise false. floor Returns the largest integer value not greater than a given number. keys Returns an array of keys in an object. length Returns the length of an array, object or string. max Returns the highest number found in an array of numbers,or the highest string in an array of strings. min Returns the lowest number found in an array of numbers, or the lowest string in an array of strings. prod Returns the product of the items in an array of numbers. starts_with Returns true if the source string starts with the prefix string, otherwise false. sum Returns the sum of the items in an array of numbers. to_number If string, returns the parsed number. If number, returns the passed in value. tokenize Returns an array of strings formed by splitting the source string into an array of strings, separated by substrings that match a given regular expression pattern."
  },
  "index.html": {
    "href": "index.html",
    "title": "JsonCons",
    "keywords": "JsonCons Documentation Reference"
  },
  "JsonCons.JsonPath.html": {
    "href": "JsonCons.JsonPath.html",
    "title": "Namespace JsonCons.JsonPath",
    "keywords": "Namespace JsonCons.JsonPath Classes JsonPathParseException Defines a custom exception object that is thrown when JSONPath parsing fails. JsonSelector Provides functionality for retrieving selected values from a root JsonElement . JsonSelectorOptions Defines the various ways a JsonSelector can handle duplicate paths and order of results. NormalizedPath Represents the location of a specific JSON value within a root JSON value. PathNode Represents a node of a NormalizedPath . Structs JsonPathNode Represents a specific location-value pair within a root JSON value. Enums PathNodeKind Specifies the type of a path node."
  },
  "JsonCons.JsonPath.JsonPathNode.html": {
    "href": "JsonCons.JsonPath.JsonPathNode.html",
    "title": "Struct JsonPathNode",
    "keywords": "Struct JsonPathNode Represents a specific location-value pair within a root JSON value. Implements System.IEquatable < JsonPathNode > System.IComparable < JsonPathNode > Inherited Members System.ValueType.Equals(System.Object) System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : JsonCons.JsonPath Assembly : JsonPath.dll Syntax public readonly struct JsonPathNode : IEquatable<JsonPathNode>, IComparable<JsonPathNode> Properties | Improve this Doc View Source Path Gets the location of this value within a root JSON value. Declaration public readonly NormalizedPath Path { get; } Property Value Type Description NormalizedPath | Improve this Doc View Source Value Gets the value Declaration public readonly JsonElement Value { get; } Property Value Type Description System.Text.Json.JsonElement Methods | Improve this Doc View Source CompareTo(JsonPathNode) Declaration public readonly int CompareTo(JsonPathNode other) Parameters Type Name Description JsonPathNode other Returns Type Description System.Int32 | Improve this Doc View Source Equals(JsonPathNode) Declaration public readonly bool Equals(JsonPathNode other) Parameters Type Name Description JsonPathNode other Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Implements System.IEquatable<T> System.IComparable<T>"
  },
  "JsonCons.JsonPath.JsonPathParseException.html": {
    "href": "JsonCons.JsonPath.JsonPathParseException.html",
    "title": "Class JsonPathParseException",
    "keywords": "Class JsonPathParseException Defines a custom exception object that is thrown when JSONPath parsing fails. Inheritance System.Object System.Exception JsonPathParseException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : JsonCons.JsonPath Assembly : JsonPath.dll Syntax public class JsonPathParseException : Exception, ISerializable Properties | Improve this Doc View Source ColumnNumber The column in the JSONPath string where a parse error was detected. Declaration public int ColumnNumber { get; } Property Value Type Description System.Int32 | Improve this Doc View Source LineNumber The line in the JSONPath string where a parse error was detected. Declaration public int LineNumber { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Exception.ToString() Implements System.Runtime.Serialization.ISerializable"
  },
  "JsonCons.JsonPath.JsonSelector.html": {
    "href": "JsonCons.JsonPath.JsonSelector.html",
    "title": "Class JsonSelector",
    "keywords": "Class JsonSelector Provides functionality for retrieving selected values from a root JsonElement . Inheritance System.Object JsonSelector Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : JsonCons.JsonPath Assembly : JsonPath.dll Syntax public sealed class JsonSelector Examples The following example shows how to select values, paths, and nodes from a JSON document using System; using System.Diagnostics; using System.Text.Json; using JsonCons.Utilities; public class Example { public static void Main() { string jsonString = @\" { \"\"books\"\": [ { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"A Wild Sheep Chase\"\", \"\"author\"\" : \"\"Haruki Murakami\"\", \"\"price\"\" : 22.72 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Night Watch\"\", \"\"author\"\" : \"\"Sergei Lukyanenko\"\", \"\"price\"\" : 23.58 }, { \"\"category\"\": \"\"fiction\"\", \"\"title\"\" : \"\"The Comedians\"\", \"\"author\"\" : \"\"Graham Greene\"\", \"\"price\"\" : 21.99 }, { \"\"category\"\": \"\"memoir\"\", \"\"title\"\" : \"\"The Night Watch\"\", \"\"author\"\" : \"\"David Atlee Phillips\"\", \"\"price\"\" : 260.90 } ] } \"); using JsonDocument doc = JsonDocument.Parse(jsonString); var options = new JsonSerializerOptions() {WriteIndented = true}; // Selector of titles from union of all books with category 'memoir' // and all books with price > 23 var selector = JsonSelector.Parse(\"$.books[?@.category=='memoir',?@.price > 23].title\"); Console.WriteLine(\"Select values\"); IList<JsonElement> values = selector.Select(doc.RootElement); foreach (var value in values) { Console.WriteLine(JsonSerializer.Serialize(value, options)); } Console.WriteLine(); Console.WriteLine(\"Select paths\"); IList<NormalizedPath> paths = selector.SelectPaths(doc.RootElement); foreach (var path in paths) { Console.WriteLine(path); } Console.WriteLine(); Console.WriteLine(\"Select nodes\"); IList<JsonPathNode> nodes = selector.SelectNodes(doc.RootElement); foreach (var node in nodes) { Console.WriteLine($\"{node.Path} => {JsonSerializer.Serialize(node.Value, options)}\"); } Console.WriteLine(); Console.WriteLine(\"Remove duplicate nodes\"); IList<JsonPathNode> uniqueNodes = selector.SelectNodes(doc.RootElement, new JsonSelectorOptions{NoDuplicates=true}); foreach (var node in uniqueNodes) { Console.WriteLine($\"{node.Path} => {JsonSerializer.Serialize(node.Value, options)}\"); } Console.WriteLine(); } } Output: Select values \"The Night Watch\" \"The Night Watch\" \"The Night Watch\" Select paths $['books'][3]['title'] $['books'][1]['title'] $['books'][3]['title'] Select nodes $['books'][3]['title'] => \"The Night Watch\" $['books'][1]['title'] => \"The Night Watch\" $['books'][3]['title'] => \"The Night Watch\" Remove duplicate nodes $['books'][3]['title'] => \"The Night Watch\" $['books'][1]['title'] => \"The Night Watch\" Methods | Improve this Doc View Source Parse(String) Parses a JSONPath string into a JsonSelector , for \"parse once, use many times\". A JsonSelector instance is thread safe and has no mutable state. Declaration public static JsonSelector Parse(string jsonPath) Parameters Type Name Description System.String jsonPath A JSONPath string. Returns Type Description JsonSelector A JsonSelector . Exceptions Type Condition JsonPathParseException The jsonPath parameter is not a valid JSONPath expression. System.ArgumentNullException The jsonPath is null . | Improve this Doc View Source Select(JsonElement, JsonSelectorOptions) Selects values within the root value that match this JSONPath expression. Declaration public IList<JsonElement> Select(JsonElement root, JsonSelectorOptions options = null) Parameters Type Name Description System.Text.Json.JsonElement root The root value. JsonSelectorOptions options Options for handling duplicate paths and order of results. Returns Type Description System.Collections.Generic.IList < System.Text.Json.JsonElement > A list of values within the root value that match this JSONPath expression | Improve this Doc View Source Select(JsonElement, String, JsonSelectorOptions) Selects values within the root value that match the provided JSONPath expression. This method parses and applies the expression in one operation. Declaration public static IList<JsonElement> Select(JsonElement root, string jsonPath, JsonSelectorOptions options = null) Parameters Type Name Description System.Text.Json.JsonElement root The root value. System.String jsonPath A JSONPath string. JsonSelectorOptions options Options for handling duplicate paths and order of results. Returns Type Description System.Collections.Generic.IList < System.Text.Json.JsonElement > A list of values within the root value that match the provided JSONPath expression Exceptions Type Condition JsonPathParseException The jsonPath parameter is not a valid JSONPath expression. System.ArgumentNullException jsonPath is null . | Improve this Doc View Source SelectNodes(JsonElement, JsonSelectorOptions) Selects nodes that represent location-value pairs within the root value that match this JSONPath expression. Declaration public IList<JsonPathNode> SelectNodes(JsonElement root, JsonSelectorOptions options = null) Parameters Type Name Description System.Text.Json.JsonElement root The root value. JsonSelectorOptions options Options for handling duplicate paths and order of results. Returns Type Description System.Collections.Generic.IList < JsonPathNode > A list of JsonPathNode representing locations-value pairs within the root value that match this JSONPath expression | Improve this Doc View Source SelectNodes(JsonElement, String, JsonSelectorOptions) Selects nodes that represent location-value pairs within the root value that match the JSONPath expression. This method parses and applies the expression in one operation. Declaration public static IList<JsonPathNode> SelectNodes(JsonElement root, string jsonPath, JsonSelectorOptions options = null) Parameters Type Name Description System.Text.Json.JsonElement root The root value. System.String jsonPath A JSONPath string. JsonSelectorOptions options Options for handling duplicate paths and order of results. Returns Type Description System.Collections.Generic.IList < JsonPathNode > A list of JsonPathNode representing locations-value pairs within the root value that match the provided JSONPath expression Exceptions Type Condition JsonPathParseException The jsonPath parameter is not a valid JSONPath expression. System.ArgumentNullException jsonPath is null . | Improve this Doc View Source SelectPaths(JsonElement, JsonSelectorOptions) Selects paths identifying the values within the root value that match this JSONPath expression. Declaration public IList<NormalizedPath> SelectPaths(JsonElement root, JsonSelectorOptions options = null) Parameters Type Name Description System.Text.Json.JsonElement root The root value. JsonSelectorOptions options Options for handling duplicate paths and order of results. Returns Type Description System.Collections.Generic.IList < NormalizedPath > A list of NormalizedPath identifying the values within the root value that match this JSONPath expression | Improve this Doc View Source SelectPaths(JsonElement, String, JsonSelectorOptions) Selects paths identifying the values within the root value that match the JSONPath expression. This method parses and applies the expression in one operation. Declaration public static IList<NormalizedPath> SelectPaths(JsonElement root, string jsonPath, JsonSelectorOptions options = null) Parameters Type Name Description System.Text.Json.JsonElement root The root value. System.String jsonPath A JSONPath string. JsonSelectorOptions options Options for handling duplicate paths and order of results. Returns Type Description System.Collections.Generic.IList < NormalizedPath > A list of NormalizedPath identifying the values within the root value that match the provided JSONPath expression Exceptions Type Condition JsonPathParseException The jsonPath parameter is not a valid JSONPath expression. System.ArgumentNullException jsonPath is null ."
  },
  "JsonCons.JsonPath.JsonSelectorOptions.html": {
    "href": "JsonCons.JsonPath.JsonSelectorOptions.html",
    "title": "Class JsonSelectorOptions",
    "keywords": "Class JsonSelectorOptions Defines the various ways a JsonSelector can handle duplicate paths and order of results. Inheritance System.Object JsonSelectorOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : JsonCons.JsonPath Assembly : JsonPath.dll Syntax public sealed class JsonSelectorOptions Properties | Improve this Doc View Source NoDuplicates Remove items from results that correspond to the same path. Declaration public bool NoDuplicates { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SortByPath Sort results by path. Declaration public bool SortByPath { get; set; } Property Value Type Description System.Boolean"
  },
  "JsonCons.JsonPath.NormalizedPath.html": {
    "href": "JsonCons.JsonPath.NormalizedPath.html",
    "title": "Class NormalizedPath",
    "keywords": "Class NormalizedPath Represents the location of a specific JSON value within a root JSON value. Inheritance System.Object NormalizedPath Implements System.IEquatable < NormalizedPath > System.IComparable < NormalizedPath > System.Collections.Generic.IEnumerable < PathNode > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : JsonCons.JsonPath Assembly : JsonPath.dll Syntax public sealed class NormalizedPath : IEquatable<NormalizedPath>, IComparable<NormalizedPath>, IEnumerable<PathNode>, IEnumerable Constructors | Improve this Doc View Source NormalizedPath(PathNode) Constructs a normalized path from the last path node. Declaration public NormalizedPath(PathNode last) Parameters Type Name Description PathNode last Properties | Improve this Doc View Source Last Gets the last node of the normalized path. Declaration public PathNode Last { get; } Property Value Type Description PathNode Methods | Improve this Doc View Source CompareTo(NormalizedPath) Declaration public int CompareTo(NormalizedPath other) Parameters Type Name Description NormalizedPath other Returns Type Description System.Int32 | Improve this Doc View Source ContainsValue(JsonElement) Looks for a value within the root value that matches this normalized path, returning true if such a value exists, false otherwise. Declaration public bool ContainsValue(JsonElement root) Parameters Type Name Description System.Text.Json.JsonElement root The root value. Returns Type Description System.Boolean true if the value was found, false otherwise. | Improve this Doc View Source Equals(NormalizedPath) Declaration public bool Equals(NormalizedPath other) Parameters Type Name Description NormalizedPath other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the components of the normalized path. Declaration public IEnumerator<PathNode> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < PathNode > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToJsonPointer() Gets a JSON Pointer representation for the normalized path. The string will have the form /aName/anotherName/anIndex with any '~' and '/' characters appearing in names escaped as per the specification. Declaration public string ToJsonPointer() Returns Type Description System.String | Improve this Doc View Source ToString() Gets a string representation for the normalized path. The string will have the form $['aName']['anotherName'][anIndex] with any single quote characters appearing in names escaped with a backslash. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source TryGetValue(JsonElement, out JsonElement) Looks for a value within the root value that matches this normalized path, returning true if such a value exists, false otherwise. When the value exists element is assigned that value. Declaration public bool TryGetValue(JsonElement root, out JsonElement element) Parameters Type Name Description System.Text.Json.JsonElement root The root value. System.Text.Json.JsonElement element Receives the value. Returns Type Description System.Boolean true if the value was found, false otherwise. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IEquatable<T> System.IComparable<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "JsonCons.JsonPath.PathNode.html": {
    "href": "JsonCons.JsonPath.PathNode.html",
    "title": "Class PathNode",
    "keywords": "Class PathNode Represents a node of a NormalizedPath . Inheritance System.Object PathNode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : JsonCons.JsonPath Assembly : JsonPath.dll Syntax public sealed class PathNode Constructors | Improve this Doc View Source PathNode(PathNode, Int32) Constructs a path node from a parent and an index Declaration public PathNode(PathNode parent, int index) Parameters Type Name Description PathNode parent The parent. System.Int32 index The index. Exceptions Type Condition System.ArgumentNullException parent is null . | Improve this Doc View Source PathNode(PathNode, String) Constructs a path node from a parent and name Declaration public PathNode(PathNode parent, string name) Parameters Type Name Description PathNode parent The parent. System.String name The name. Exceptions Type Condition System.ArgumentNullException parent is null . name is null . Properties | Improve this Doc View Source ComponentKind Gets the type of this path node. Declaration public PathNodeKind ComponentKind { get; } Property Value Type Description PathNodeKind | Improve this Doc View Source Current Gets a current node Declaration public static PathNode Current { get; } Property Value Type Description PathNode | Improve this Doc View Source Parent Gets the parent of this path node. Declaration public PathNode Parent { get; } Property Value Type Description PathNode | Improve this Doc View Source Root Gets a root node Declaration public static PathNode Root { get; } Property Value Type Description PathNode Methods | Improve this Doc View Source CompareTo(PathNode) Declaration public int CompareTo(PathNode other) Parameters Type Name Description PathNode other Returns Type Description System.Int32 | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetIndex() Gets the value of this path node as an index. Declaration public int GetIndex() Returns Type Description System.Int32 | Improve this Doc View Source GetName() Gets the value of this path node as a name. Declaration public string GetName() Returns Type Description System.String"
  },
  "JsonCons.JsonPath.PathNodeKind.html": {
    "href": "JsonCons.JsonPath.PathNodeKind.html",
    "title": "Enum PathNodeKind",
    "keywords": "Enum PathNodeKind Specifies the type of a path node. Namespace : JsonCons.JsonPath Assembly : JsonPath.dll Syntax public enum PathNodeKind Fields Name Description Index Indicates a path node that matches on array indices. Name Indicates a path node that matches on property names. Root Indicates the root path node"
  },
  "JsonCons.Utilities.html": {
    "href": "JsonCons.Utilities.html",
    "title": "Namespace JsonCons.Utilities",
    "keywords": "Namespace JsonCons.Utilities Classes JsonElementEqualityComparer Compares two System.Text.Json.JsonElement instances for equality by using value-based comparison. JsonFlattener Provides functionality to flatten a JSON object or array to a single depth JSON object of JSON Pointer-value pairs, and to unflatten a flattened JSON object. JsonPatch Provides functionality for applying a JSON Patch as defined in RFC 6902 to a JSON value. JsonPatchException Captures error message and the operation that caused it. JsonPointer Represents a JSON Pointer as defined by RFC 6901 Enums IntegerTokenHandling Defines how the unflatten operation handles integer tokens in a JSON Pointer"
  },
  "JsonCons.Utilities.IntegerTokenHandling.html": {
    "href": "JsonCons.Utilities.IntegerTokenHandling.html",
    "title": "Enum IntegerTokenHandling",
    "keywords": "Enum IntegerTokenHandling Defines how the unflatten operation handles integer tokens in a JSON Pointer Namespace : JsonCons.Utilities Assembly : JsonCons.Utilities.dll Syntax public enum IntegerTokenHandling Fields Name Description IndexFirst The unflatten operation first tries to unflatten into a JSON array using the integer tokens as sequential indices, and if that fails, unflattens into a JSON object using the integer tokens as names. NameOnly The unflatten operation always unflattens into a JSON object using the integer tokens as names."
  },
  "JsonCons.Utilities.JsonElementEqualityComparer.html": {
    "href": "JsonCons.Utilities.JsonElementEqualityComparer.html",
    "title": "Class JsonElementEqualityComparer",
    "keywords": "Class JsonElementEqualityComparer Compares two System.Text.Json.JsonElement instances for equality by using value-based comparison. Inheritance System.Object JsonElementEqualityComparer Implements System.Collections.Generic.IEqualityComparer < System.Text.Json.JsonElement > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : JsonCons.Utilities Assembly : JsonCons.Utilities.dll Syntax public sealed class JsonElementEqualityComparer : IEqualityComparer<JsonElement> Properties | Improve this Doc View Source Instance Declaration public static JsonElementEqualityComparer Instance { get; } Property Value Type Description JsonElementEqualityComparer Methods | Improve this Doc View Source Equals(JsonElement, JsonElement) Determines whether the provided System.Text.Json.JsonElement objects are equal. Declaration public bool Equals(JsonElement lhs, JsonElement rhs) Parameters Type Name Description System.Text.Json.JsonElement lhs The first object of type cref=\"JsonElement\"/> to compare. System.Text.Json.JsonElement rhs The second object of type cref=\"JsonElement\"/> to compare. Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode(JsonElement) Declaration public int GetHashCode(JsonElement obj) Parameters Type Name Description System.Text.Json.JsonElement obj Returns Type Description System.Int32 Implements System.Collections.Generic.IEqualityComparer<T>"
  },
  "JsonCons.Utilities.JsonFlattener.html": {
    "href": "JsonCons.Utilities.JsonFlattener.html",
    "title": "Class JsonFlattener",
    "keywords": "Class JsonFlattener Provides functionality to flatten a JSON object or array to a single depth JSON object of JSON Pointer-value pairs, and to unflatten a flattened JSON object. Inheritance System.Object JsonFlattener Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : JsonCons.Utilities Assembly : JsonCons.Utilities.dll Syntax public static class JsonFlattener Examples This example shows how to flatten and unflatten a JSON value using System; using System.Diagnostics; using System.Text.Json; using JsonCons.Utilities; public class Example { public static void Main() { using var doc = JsonDocument.Parse(@\" { \"\"application\"\": \"\"hiking\"\", \"\"reputons\"\": [ { \"\"rater\"\": \"\"HikingAsylum\"\", \"\"assertion\"\": \"\"advanced\"\", \"\"rated\"\": \"\"Marilyn C\"\", \"\"rating\"\": 0.90 }, { \"\"rater\"\": \"\"HikingAsylum\"\", \"\"assertion\"\": \"\"intermediate\"\", \"\"rated\"\": \"\"Hongmin\"\", \"\"rating\"\": 0.75 } ] } \"); using JsonDocument flattened = JsonFlattener.Flatten(doc.RootElement); var options = new JsonSerializerOptions() { WriteIndented = true }; Console.WriteLine($\"{JsonSerializer.Serialize(flattened, options)}\\n\"); using JsonDocument unflattened = JsonFlattener.Unflatten(flattened.RootElement); var comparer = JsonElementEqualityComparer.Instance; Debug.Assert(comparer.Equals(unflattened.RootElement,doc.RootElement)); } } Output: { \"/application\": \"hiking\", \"/reputons/0/rater\": \"HikingAsylum\", \"/reputons/0/assertion\": \"advanced\", \"/reputons/0/rated\": \"Marilyn C\", \"/reputons/0/rating\": 0.90, \"/reputons/1/rater\": \"HikingAsylum\", \"/reputons/1/assertion\": \"intermediate\", \"/reputons/1/rated\": \"Hongmin\", \"/reputons/1/rating\": 0.75 } Methods | Improve this Doc View Source Flatten(JsonElement) Converts a JSON object or array into a single depth JSON object of name-value pairs, such that the names are JSON Pointer strings, and the values are either string, number, true, false, null, empty object, or empty array. Declaration public static JsonDocument Flatten(JsonElement value) Parameters Type Name Description System.Text.Json.JsonElement value The value to be flattened. Returns Type Description System.Text.Json.JsonDocument The flattened value Remarks It is the users responsibilty to properly Dispose the returned JSONDocument value | Improve this Doc View Source Unflatten(JsonElement, IntegerTokenHandling) Recovers the orginal JSON value from a JSON object in flattened form, to the extent possible. There may not be a unique solution, an integer token in a JSON Pointer could be an array index or it could be an object name. The default behavior is to attempt to recover arrays. The options parameter can be used to recover objects with integer names instead. Declaration public static JsonDocument Unflatten(JsonElement flattenedValue, IntegerTokenHandling options = IntegerTokenHandling.IndexFirst) Parameters Type Name Description System.Text.Json.JsonElement flattenedValue The flattened value, which must be a JSON object of name-value pairs, such that the names are JSON Pointer strings, and the values are either string, number, true, false, null, empty object, or empty array. IntegerTokenHandling options Options for handling integer tokens in the JSON Pointer. Returns Type Description System.Text.Json.JsonDocument The unflattened value Remarks It is the users responsibilty to properly Dispose the returned JSONDocument value Exceptions Type Condition System.ArgumentException The flattenedValue is not a JSON object, or has a name that contains an invalid JSON pointer."
  },
  "JsonCons.Utilities.JsonPatch.html": {
    "href": "JsonCons.Utilities.JsonPatch.html",
    "title": "Class JsonPatch",
    "keywords": "Class JsonPatch Provides functionality for applying a JSON Patch as defined in RFC 6902 to a JSON value. Inheritance System.Object JsonPatch Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : JsonCons.Utilities Assembly : JsonCons.Utilities.dll Syntax public static class JsonPatch Examples The following example borrowed from jsonpatch.com shows how to apply a JSON Patch to a JSON value using System; using System.Diagnostics; using System.Text.Json; using JsonCons.Utilities; public class Example { public static void Main() { using var doc = JsonDocument.Parse(@\" { \"\"baz\"\": \"\"qux\"\", \"\"foo\"\": \"\"bar\"\" } \"); using var patch = JsonDocument.Parse(@\" [ { \"\"op\"\": \"\"replace\"\", \"\"path\"\": \"\"/baz\"\", \"\"value\"\": \"\"boo\"\" }, { \"\"op\"\": \"\"add\"\", \"\"path\"\": \"\"/hello\"\", \"\"value\"\": [\"\"world\"\"] }, { \"\"op\"\": \"\"remove\"\", \"\"path\"\": \"\"/foo\"\" } ] \"); using JsonDocument result = JsonPatch.ApplyPatch(doc.RootElement, patch.RootElement); var options = new JsonSerializerOptions() { WriteIndented = true }; Console.WriteLine(\"The original document:\\n\"); Console.WriteLine($\"{JsonSerializer.Serialize(doc.RootElement, options)}\\n\"); Console.WriteLine(\"The patch:\\n\"); Console.WriteLine($\"{JsonSerializer.Serialize(patch.RootElement, options)}\\n\"); Console.WriteLine(\"The result:\\n\"); Console.WriteLine($\"{JsonSerializer.Serialize(result, options)}\\n\"); \"); } } The original document: { \"baz\": \"qux\", \"foo\": \"bar\" } The patch: [ { \"op\": \"replace\", \"path\": \"/baz\", \"value\": \"boo\" }, { \"op\": \"add\", \"path\": \"/hello\", \"value\": [ \"world\" ] }, { \"op\": \"remove\", \"path\": \"/foo\" } ] The result: { \"baz\": \"boo\", \"hello\": [ \"world\" ] } Methods | Improve this Doc View Source ApplyPatch(JsonElement, JsonElement) Applies a JSON Patch as defined in RFC 6902 to a source JSON value. Declaration public static JsonDocument ApplyPatch(JsonElement source, JsonElement patch) Parameters Type Name Description System.Text.Json.JsonElement source The source JSON value. System.Text.Json.JsonElement patch The patch to be applied to the source JSON value. Returns Type Description System.Text.Json.JsonDocument The patched JSON value Remarks It is the users responsibilty to properly Dispose the returned JSONDocument value Exceptions Type Condition System.ArgumentException The provided patch is invalid JsonPatchException A JSON Patch operation failed | Improve this Doc View Source FromDiff(JsonElement, JsonElement) Builds a JSON Patch as defined in RFC 6902 given two JSON values, a source and a target. Declaration public static JsonDocument FromDiff(JsonElement source, JsonElement target) Parameters Type Name Description System.Text.Json.JsonElement source The source JSON value. System.Text.Json.JsonElement target The target JSON value. Returns Type Description System.Text.Json.JsonDocument A patch to convert the source JSON value to the target JSON value Remarks It is the users responsibilty to properly Dispose the returned JSONDocument value"
  },
  "JsonCons.Utilities.JsonPatchException.html": {
    "href": "JsonCons.Utilities.JsonPatchException.html",
    "title": "Class JsonPatchException",
    "keywords": "Class JsonPatchException Captures error message and the operation that caused it. Inheritance System.Object System.Exception JsonPatchException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : JsonCons.Utilities Assembly : JsonCons.Utilities.dll Syntax public class JsonPatchException : Exception, ISerializable Constructors | Improve this Doc View Source JsonPatchException(String, String) Constructs a JsonPatchException . Declaration public JsonPatchException(string operation, string message) Parameters Type Name Description System.String operation The operation that caused the error. System.String message The error message. Properties | Improve this Doc View Source Operation Gets the System.String that caused the error. Declaration public string Operation { get; } Property Value Type Description System.String Implements System.Runtime.Serialization.ISerializable"
  },
  "JsonCons.Utilities.JsonPointer.html": {
    "href": "JsonCons.Utilities.JsonPointer.html",
    "title": "Class JsonPointer",
    "keywords": "Class JsonPointer Represents a JSON Pointer as defined by RFC 6901 Inheritance System.Object JsonPointer Implements System.Collections.Generic.IEnumerable < System.String > System.Collections.IEnumerable System.IEquatable < JsonPointer > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : JsonCons.Utilities Assembly : JsonCons.Utilities.dll Syntax public sealed class JsonPointer : IEnumerable<string>, IEnumerable, IEquatable<JsonPointer> Constructors | Improve this Doc View Source JsonPointer(IReadOnlyList<String>) Constructs a JSON Pointer from a list of tokens Declaration public JsonPointer(IReadOnlyList<string> tokens) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < System.String > tokens A list of (unescaped) JSON Pointer tokens. Properties | Improve this Doc View Source Tokens Declaration public IReadOnlyList<string> Tokens { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.String > Methods | Improve this Doc View Source ContainsValue(JsonElement) Evaluates this JSON Pointer on the provided target. Declaration public bool ContainsValue(JsonElement target) Parameters Type Name Description System.Text.Json.JsonElement target Returns Type Description System.Boolean | Improve this Doc View Source Equals(JsonPointer) Determines whether two JSONPointer objects have the same value. Declaration public bool Equals(JsonPointer other) Parameters Type Name Description JsonPointer other Returns Type Description System.Boolean true if other is a JsonPointer and has exactly the same tokens as this instance; otherwise, false . If other is null , the method returns false . | Improve this Doc View Source Equals(Object) Determines whether this instance and a specified object, which must also be a JSONPointer object, have the same value. Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Escape(String) Escapes a JSON Pointer token Declaration public static string Escape(string token) Parameters Type Name Description System.String token Returns Type Description System.String Exceptions Type Condition System.ArgumentNullException The token is null . | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through a list of tokens. Declaration public IEnumerator<string> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.String > An IEnumerator<string> for a list of tokens. | Improve this Doc View Source GetHashCode() Returns the hash code for this JsonPointer Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer hash code. Overrides System.Object.GetHashCode() | Improve this Doc View Source Parse(String) Parses a JSON Pointer represented as a string value or a fragment identifier (starts with # ) into a JsonPointer . Declaration public static JsonPointer Parse(string input) Parameters Type Name Description System.String input A JSON Pointer represented as a string or a fragment identifier. Returns Type Description JsonPointer A JsonPointer . Exceptions Type Condition System.ArgumentNullException The input is null . System.ArgumentException The input is invalid. | Improve this Doc View Source ToString() Returns a JSON Pointer represented as a string value. Declaration public override string ToString() Returns Type Description System.String A JSON Pointer represented as a string value. Overrides System.Object.ToString() | Improve this Doc View Source ToUriFragment() Returns a string representing the JSON Pointer as a URI fragment identifier Declaration public string ToUriFragment() Returns Type Description System.String A JSON Pointer represented as a fragment identifier. | Improve this Doc View Source TryGetValue(JsonElement, String, out JsonElement) Returns the value at the referenced location in the specified target. Declaration public static bool TryGetValue(JsonElement target, string pointer, out JsonElement value) Parameters Type Name Description System.Text.Json.JsonElement target System.String pointer System.Text.Json.JsonElement value Returns Type Description System.Boolean Exceptions Type Condition System.ArgumentNullException The pointer is null . | Improve this Doc View Source TryGetValue(JsonElement, out JsonElement) Evaluates this JSON Pointer on the provided target. Declaration public bool TryGetValue(JsonElement target, out JsonElement value) Parameters Type Name Description System.Text.Json.JsonElement target System.Text.Json.JsonElement value Returns Type Description System.Boolean | Improve this Doc View Source TryParse(String, out JsonPointer) Parses a JSON Pointer represented as a string value or a fragment identifier (starts with # ) into a JsonPointer . Declaration public static bool TryParse(string input, out JsonPointer pointer) Parameters Type Name Description System.String input A JSON Pointer represented as a string or a fragment identifier. JsonPointer pointer The JSONPointer. Returns Type Description System.Boolean true if the input string can be parsed into a list of tokens, false otherwise. Exceptions Type Condition System.ArgumentNullException The input is null . Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.IEquatable<T>"
  }
}