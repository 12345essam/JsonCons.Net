### YamlMime:ManagedReference
items:
- uid: JsonCons.JsonPathLib.NormalizedPath
  commentId: T:JsonCons.JsonPathLib.NormalizedPath
  id: NormalizedPath
  parent: JsonCons.JsonPathLib
  children:
  - JsonCons.JsonPathLib.NormalizedPath.#ctor(JsonCons.JsonPathLib.PathComponent)
  - JsonCons.JsonPathLib.NormalizedPath.CompareTo(JsonCons.JsonPathLib.NormalizedPath)
  - JsonCons.JsonPathLib.NormalizedPath.Equals(JsonCons.JsonPathLib.NormalizedPath)
  - JsonCons.JsonPathLib.NormalizedPath.Equals(System.Object)
  - JsonCons.JsonPathLib.NormalizedPath.GetEnumerator
  - JsonCons.JsonPathLib.NormalizedPath.GetHashCode
  - JsonCons.JsonPathLib.NormalizedPath.Root
  - JsonCons.JsonPathLib.NormalizedPath.Stem
  - JsonCons.JsonPathLib.NormalizedPath.System#Collections#IEnumerable#GetEnumerator
  - JsonCons.JsonPathLib.NormalizedPath.ToJsonPointer
  - JsonCons.JsonPathLib.NormalizedPath.ToString
  - JsonCons.JsonPathLib.NormalizedPath.TryGet(System.Text.Json.JsonElement,System.Text.Json.JsonElement@)
  langs:
  - csharp
  - vb
  name: NormalizedPath
  nameWithType: NormalizedPath
  fullName: JsonCons.JsonPathLib.NormalizedPath
  type: Class
  source:
    remote:
      path: src/JsonPath/NormalizedPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: NormalizedPath
    path: ../src/JsonPath/NormalizedPath.cs
    startLine: 96
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  summary: "\nRepresents the location of a specific JSON value within the root element.\n\n"
  example: []
  syntax:
    content: 'public sealed class NormalizedPath : IEquatable<NormalizedPath>, IComparable<NormalizedPath>, IEnumerable<PathComponent>, IEnumerable'
    content.vb: >-
      Public NotInheritable Class NormalizedPath
          Implements IEquatable(Of NormalizedPath), IComparable(Of NormalizedPath), IEnumerable(Of PathComponent), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{JsonCons.JsonPathLib.NormalizedPath}
  - System.IComparable{JsonCons.JsonPathLib.NormalizedPath}
  - System.Collections.Generic.IEnumerable{JsonCons.JsonPathLib.PathComponent}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: JsonCons.JsonPathLib.NormalizedPath.#ctor(JsonCons.JsonPathLib.PathComponent)
  commentId: M:JsonCons.JsonPathLib.NormalizedPath.#ctor(JsonCons.JsonPathLib.PathComponent)
  id: '#ctor(JsonCons.JsonPathLib.PathComponent)'
  parent: JsonCons.JsonPathLib.NormalizedPath
  langs:
  - csharp
  - vb
  name: NormalizedPath(PathComponent)
  nameWithType: NormalizedPath.NormalizedPath(PathComponent)
  fullName: JsonCons.JsonPathLib.NormalizedPath.NormalizedPath(JsonCons.JsonPathLib.PathComponent)
  type: Constructor
  source:
    remote:
      path: src/JsonPath/NormalizedPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: .ctor
    path: ../src/JsonPath/NormalizedPath.cs
    startLine: 100
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  syntax:
    content: public NormalizedPath(PathComponent node)
    parameters:
    - id: node
      type: JsonCons.JsonPathLib.PathComponent
    content.vb: Public Sub New(node As PathComponent)
  overload: JsonCons.JsonPathLib.NormalizedPath.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: JsonCons.JsonPathLib.NormalizedPath.Root
  commentId: P:JsonCons.JsonPathLib.NormalizedPath.Root
  id: Root
  parent: JsonCons.JsonPathLib.NormalizedPath
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: NormalizedPath.Root
  fullName: JsonCons.JsonPathLib.NormalizedPath.Root
  type: Property
  source:
    remote:
      path: src/JsonPath/NormalizedPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: Root
    path: ../src/JsonPath/NormalizedPath.cs
    startLine: 116
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  syntax:
    content: public PathComponent Root { get; }
    parameters: []
    return:
      type: JsonCons.JsonPathLib.PathComponent
    content.vb: Public ReadOnly Property Root As PathComponent
  overload: JsonCons.JsonPathLib.NormalizedPath.Root*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: JsonCons.JsonPathLib.NormalizedPath.Stem
  commentId: P:JsonCons.JsonPathLib.NormalizedPath.Stem
  id: Stem
  parent: JsonCons.JsonPathLib.NormalizedPath
  langs:
  - csharp
  - vb
  name: Stem
  nameWithType: NormalizedPath.Stem
  fullName: JsonCons.JsonPathLib.NormalizedPath.Stem
  type: Property
  source:
    remote:
      path: src/JsonPath/NormalizedPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: Stem
    path: ../src/JsonPath/NormalizedPath.cs
    startLine: 118
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  syntax:
    content: public PathComponent Stem { get; }
    parameters: []
    return:
      type: JsonCons.JsonPathLib.PathComponent
    content.vb: Public ReadOnly Property Stem As PathComponent
  overload: JsonCons.JsonPathLib.NormalizedPath.Stem*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: JsonCons.JsonPathLib.NormalizedPath.GetEnumerator
  commentId: M:JsonCons.JsonPathLib.NormalizedPath.GetEnumerator
  id: GetEnumerator
  parent: JsonCons.JsonPathLib.NormalizedPath
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: NormalizedPath.GetEnumerator()
  fullName: JsonCons.JsonPathLib.NormalizedPath.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/JsonPath/NormalizedPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: GetEnumerator
    path: ../src/JsonPath/NormalizedPath.cs
    startLine: 125
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  summary: "\nReturns an enumerator that iterates through the components of the normalized path. \n\n"
  example: []
  syntax:
    content: public IEnumerator<PathComponent> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{JsonCons.JsonPathLib.PathComponent}
    content.vb: Public Function GetEnumerator As IEnumerator(Of PathComponent)
  overload: JsonCons.JsonPathLib.NormalizedPath.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{JsonCons.JsonPathLib.PathComponent}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: JsonCons.JsonPathLib.NormalizedPath.System#Collections#IEnumerable#GetEnumerator
  commentId: M:JsonCons.JsonPathLib.NormalizedPath.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: JsonCons.JsonPathLib.NormalizedPath
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: NormalizedPath.IEnumerable.GetEnumerator()
  fullName: JsonCons.JsonPathLib.NormalizedPath.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/JsonPath/NormalizedPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../src/JsonPath/NormalizedPath.cs
    startLine: 131
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: JsonCons.JsonPathLib.NormalizedPath.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: NormalizedPath.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: JsonCons.JsonPathLib.NormalizedPath.ToString
  commentId: M:JsonCons.JsonPathLib.NormalizedPath.ToString
  id: ToString
  parent: JsonCons.JsonPathLib.NormalizedPath
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: NormalizedPath.ToString()
  fullName: JsonCons.JsonPathLib.NormalizedPath.ToString()
  type: Method
  source:
    remote:
      path: src/JsonPath/NormalizedPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: ToString
    path: ../src/JsonPath/NormalizedPath.cs
    startLine: 143
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  summary: "\nGets a string representation for the normalized path. \nThe string will have the form $[&apos;aName&apos;][&apos;anotherName&apos;][anIndex]\nwith any single quote characters appearing in names escaped with a backslash. \n\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: JsonCons.JsonPathLib.NormalizedPath.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: JsonCons.JsonPathLib.NormalizedPath.ToJsonPointer
  commentId: M:JsonCons.JsonPathLib.NormalizedPath.ToJsonPointer
  id: ToJsonPointer
  parent: JsonCons.JsonPathLib.NormalizedPath
  langs:
  - csharp
  - vb
  name: ToJsonPointer()
  nameWithType: NormalizedPath.ToJsonPointer()
  fullName: JsonCons.JsonPathLib.NormalizedPath.ToJsonPointer()
  type: Method
  source:
    remote:
      path: src/JsonPath/NormalizedPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: ToJsonPointer
    path: ../src/JsonPath/NormalizedPath.cs
    startLine: 186
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  summary: "\nGets a <a href=\"https://datatracker.ietf.org/doc/html/rfc6901\">JSON Pointer</a> representation for the normalized path. \nThe string will have the form /aName/anotherName/anIndex with any &apos;~&apos; and &apos;/&apos; characters appearing in names escaped as per the \nspecification.\n\n"
  example: []
  syntax:
    content: public string ToJsonPointer()
    return:
      type: System.String
    content.vb: Public Function ToJsonPointer As String
  overload: JsonCons.JsonPathLib.NormalizedPath.ToJsonPointer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: JsonCons.JsonPathLib.NormalizedPath.Equals(JsonCons.JsonPathLib.NormalizedPath)
  commentId: M:JsonCons.JsonPathLib.NormalizedPath.Equals(JsonCons.JsonPathLib.NormalizedPath)
  id: Equals(JsonCons.JsonPathLib.NormalizedPath)
  parent: JsonCons.JsonPathLib.NormalizedPath
  langs:
  - csharp
  - vb
  name: Equals(NormalizedPath)
  nameWithType: NormalizedPath.Equals(NormalizedPath)
  fullName: JsonCons.JsonPathLib.NormalizedPath.Equals(JsonCons.JsonPathLib.NormalizedPath)
  type: Method
  source:
    remote:
      path: src/JsonPath/NormalizedPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: Equals
    path: ../src/JsonPath/NormalizedPath.cs
    startLine: 231
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  syntax:
    content: public bool Equals(NormalizedPath other)
    parameters:
    - id: other
      type: JsonCons.JsonPathLib.NormalizedPath
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As NormalizedPath) As Boolean
  overload: JsonCons.JsonPathLib.NormalizedPath.Equals*
  implements:
  - System.IEquatable{JsonCons.JsonPathLib.NormalizedPath}.Equals(JsonCons.JsonPathLib.NormalizedPath)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: JsonCons.JsonPathLib.NormalizedPath.Equals(System.Object)
  commentId: M:JsonCons.JsonPathLib.NormalizedPath.Equals(System.Object)
  id: Equals(System.Object)
  parent: JsonCons.JsonPathLib.NormalizedPath
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: NormalizedPath.Equals(Object)
  fullName: JsonCons.JsonPathLib.NormalizedPath.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/JsonPath/NormalizedPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: Equals
    path: ../src/JsonPath/NormalizedPath.cs
    startLine: 241
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  syntax:
    content: public override bool Equals(object other)
    parameters:
    - id: other
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: JsonCons.JsonPathLib.NormalizedPath.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: JsonCons.JsonPathLib.NormalizedPath.CompareTo(JsonCons.JsonPathLib.NormalizedPath)
  commentId: M:JsonCons.JsonPathLib.NormalizedPath.CompareTo(JsonCons.JsonPathLib.NormalizedPath)
  id: CompareTo(JsonCons.JsonPathLib.NormalizedPath)
  parent: JsonCons.JsonPathLib.NormalizedPath
  langs:
  - csharp
  - vb
  name: CompareTo(NormalizedPath)
  nameWithType: NormalizedPath.CompareTo(NormalizedPath)
  fullName: JsonCons.JsonPathLib.NormalizedPath.CompareTo(JsonCons.JsonPathLib.NormalizedPath)
  type: Method
  source:
    remote:
      path: src/JsonPath/NormalizedPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: CompareTo
    path: ../src/JsonPath/NormalizedPath.cs
    startLine: 251
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  syntax:
    content: public int CompareTo(NormalizedPath other)
    parameters:
    - id: other
      type: JsonCons.JsonPathLib.NormalizedPath
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(other As NormalizedPath) As Integer
  overload: JsonCons.JsonPathLib.NormalizedPath.CompareTo*
  implements:
  - System.IComparable{JsonCons.JsonPathLib.NormalizedPath}.CompareTo(JsonCons.JsonPathLib.NormalizedPath)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: JsonCons.JsonPathLib.NormalizedPath.GetHashCode
  commentId: M:JsonCons.JsonPathLib.NormalizedPath.GetHashCode
  id: GetHashCode
  parent: JsonCons.JsonPathLib.NormalizedPath
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: NormalizedPath.GetHashCode()
  fullName: JsonCons.JsonPathLib.NormalizedPath.GetHashCode()
  type: Method
  source:
    remote:
      path: src/JsonPath/NormalizedPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: GetHashCode
    path: ../src/JsonPath/NormalizedPath.cs
    startLine: 267
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: JsonCons.JsonPathLib.NormalizedPath.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: JsonCons.JsonPathLib.NormalizedPath.TryGet(System.Text.Json.JsonElement,System.Text.Json.JsonElement@)
  commentId: M:JsonCons.JsonPathLib.NormalizedPath.TryGet(System.Text.Json.JsonElement,System.Text.Json.JsonElement@)
  id: TryGet(System.Text.Json.JsonElement,System.Text.Json.JsonElement@)
  parent: JsonCons.JsonPathLib.NormalizedPath
  langs:
  - csharp
  - vb
  name: TryGet(JsonElement, out JsonElement)
  nameWithType: NormalizedPath.TryGet(JsonElement, out JsonElement)
  fullName: JsonCons.JsonPathLib.NormalizedPath.TryGet(System.Text.Json.JsonElement, out System.Text.Json.JsonElement)
  type: Method
  source:
    remote:
      path: src/JsonPath/NormalizedPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: TryGet
    path: ../src/JsonPath/NormalizedPath.cs
    startLine: 278
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  syntax:
    content: public bool TryGet(JsonElement root, out JsonElement element)
    parameters:
    - id: root
      type: System.Text.Json.JsonElement
    - id: element
      type: System.Text.Json.JsonElement
    return:
      type: System.Boolean
    content.vb: Public Function TryGet(root As JsonElement, ByRef element As JsonElement) As Boolean
  overload: JsonCons.JsonPathLib.NormalizedPath.TryGet*
  nameWithType.vb: NormalizedPath.TryGet(JsonElement, ByRef JsonElement)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: JsonCons.JsonPathLib.NormalizedPath.TryGet(System.Text.Json.JsonElement, ByRef System.Text.Json.JsonElement)
  name.vb: TryGet(JsonElement, ByRef JsonElement)
references:
- uid: JsonCons.JsonPathLib
  commentId: N:JsonCons.JsonPathLib
  name: JsonCons.JsonPathLib
  nameWithType: JsonCons.JsonPathLib
  fullName: JsonCons.JsonPathLib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{JsonCons.JsonPathLib.NormalizedPath}
  commentId: T:System.IEquatable{JsonCons.JsonPathLib.NormalizedPath}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<NormalizedPath>
  nameWithType: IEquatable<NormalizedPath>
  fullName: System.IEquatable<JsonCons.JsonPathLib.NormalizedPath>
  nameWithType.vb: IEquatable(Of NormalizedPath)
  fullName.vb: System.IEquatable(Of JsonCons.JsonPathLib.NormalizedPath)
  name.vb: IEquatable(Of NormalizedPath)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: JsonCons.JsonPathLib.NormalizedPath
    name: NormalizedPath
    nameWithType: NormalizedPath
    fullName: JsonCons.JsonPathLib.NormalizedPath
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: JsonCons.JsonPathLib.NormalizedPath
    name: NormalizedPath
    nameWithType: NormalizedPath
    fullName: JsonCons.JsonPathLib.NormalizedPath
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{JsonCons.JsonPathLib.NormalizedPath}
  commentId: T:System.IComparable{JsonCons.JsonPathLib.NormalizedPath}
  parent: System
  definition: System.IComparable`1
  name: IComparable<NormalizedPath>
  nameWithType: IComparable<NormalizedPath>
  fullName: System.IComparable<JsonCons.JsonPathLib.NormalizedPath>
  nameWithType.vb: IComparable(Of NormalizedPath)
  fullName.vb: System.IComparable(Of JsonCons.JsonPathLib.NormalizedPath)
  name.vb: IComparable(Of NormalizedPath)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: JsonCons.JsonPathLib.NormalizedPath
    name: NormalizedPath
    nameWithType: NormalizedPath
    fullName: JsonCons.JsonPathLib.NormalizedPath
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: JsonCons.JsonPathLib.NormalizedPath
    name: NormalizedPath
    nameWithType: NormalizedPath
    fullName: JsonCons.JsonPathLib.NormalizedPath
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{JsonCons.JsonPathLib.PathComponent}
  commentId: T:System.Collections.Generic.IEnumerable{JsonCons.JsonPathLib.PathComponent}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PathComponent>
  nameWithType: IEnumerable<PathComponent>
  fullName: System.Collections.Generic.IEnumerable<JsonCons.JsonPathLib.PathComponent>
  nameWithType.vb: IEnumerable(Of PathComponent)
  fullName.vb: System.Collections.Generic.IEnumerable(Of JsonCons.JsonPathLib.PathComponent)
  name.vb: IEnumerable(Of PathComponent)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: JsonCons.JsonPathLib.PathComponent
    name: PathComponent
    nameWithType: PathComponent
    fullName: JsonCons.JsonPathLib.PathComponent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: JsonCons.JsonPathLib.PathComponent
    name: PathComponent
    nameWithType: PathComponent
    fullName: JsonCons.JsonPathLib.PathComponent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: JsonCons.JsonPathLib.NormalizedPath.#ctor*
  commentId: Overload:JsonCons.JsonPathLib.NormalizedPath.#ctor
  name: NormalizedPath
  nameWithType: NormalizedPath.NormalizedPath
  fullName: JsonCons.JsonPathLib.NormalizedPath.NormalizedPath
- uid: JsonCons.JsonPathLib.PathComponent
  commentId: T:JsonCons.JsonPathLib.PathComponent
  parent: JsonCons.JsonPathLib
  name: PathComponent
  nameWithType: PathComponent
  fullName: JsonCons.JsonPathLib.PathComponent
- uid: JsonCons.JsonPathLib.NormalizedPath.Root*
  commentId: Overload:JsonCons.JsonPathLib.NormalizedPath.Root
  name: Root
  nameWithType: NormalizedPath.Root
  fullName: JsonCons.JsonPathLib.NormalizedPath.Root
- uid: JsonCons.JsonPathLib.NormalizedPath.Stem*
  commentId: Overload:JsonCons.JsonPathLib.NormalizedPath.Stem
  name: Stem
  nameWithType: NormalizedPath.Stem
  fullName: JsonCons.JsonPathLib.NormalizedPath.Stem
- uid: JsonCons.JsonPathLib.NormalizedPath.GetEnumerator*
  commentId: Overload:JsonCons.JsonPathLib.NormalizedPath.GetEnumerator
  name: GetEnumerator
  nameWithType: NormalizedPath.GetEnumerator
  fullName: JsonCons.JsonPathLib.NormalizedPath.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{JsonCons.JsonPathLib.PathComponent}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{JsonCons.JsonPathLib.PathComponent}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{JsonCons.JsonPathLib.PathComponent}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<PathComponent>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<JsonCons.JsonPathLib.PathComponent>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of PathComponent).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of JsonCons.JsonPathLib.PathComponent).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<PathComponent>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<JsonCons.JsonPathLib.PathComponent>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of PathComponent).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of JsonCons.JsonPathLib.PathComponent).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{JsonCons.JsonPathLib.PathComponent}
  commentId: T:System.Collections.Generic.IEnumerator{JsonCons.JsonPathLib.PathComponent}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<PathComponent>
  nameWithType: IEnumerator<PathComponent>
  fullName: System.Collections.Generic.IEnumerator<JsonCons.JsonPathLib.PathComponent>
  nameWithType.vb: IEnumerator(Of PathComponent)
  fullName.vb: System.Collections.Generic.IEnumerator(Of JsonCons.JsonPathLib.PathComponent)
  name.vb: IEnumerator(Of PathComponent)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: JsonCons.JsonPathLib.PathComponent
    name: PathComponent
    nameWithType: PathComponent
    fullName: JsonCons.JsonPathLib.PathComponent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: JsonCons.JsonPathLib.PathComponent
    name: PathComponent
    nameWithType: PathComponent
    fullName: JsonCons.JsonPathLib.PathComponent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: JsonCons.JsonPathLib.NormalizedPath.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:JsonCons.JsonPathLib.NormalizedPath.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: NormalizedPath.IEnumerable.GetEnumerator
  fullName: JsonCons.JsonPathLib.NormalizedPath.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: NormalizedPath.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: JsonCons.JsonPathLib.NormalizedPath.ToString*
  commentId: Overload:JsonCons.JsonPathLib.NormalizedPath.ToString
  name: ToString
  nameWithType: NormalizedPath.ToString
  fullName: JsonCons.JsonPathLib.NormalizedPath.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: JsonCons.JsonPathLib.NormalizedPath.ToJsonPointer*
  commentId: Overload:JsonCons.JsonPathLib.NormalizedPath.ToJsonPointer
  name: ToJsonPointer
  nameWithType: NormalizedPath.ToJsonPointer
  fullName: JsonCons.JsonPathLib.NormalizedPath.ToJsonPointer
- uid: JsonCons.JsonPathLib.NormalizedPath.Equals*
  commentId: Overload:JsonCons.JsonPathLib.NormalizedPath.Equals
  name: Equals
  nameWithType: NormalizedPath.Equals
  fullName: JsonCons.JsonPathLib.NormalizedPath.Equals
- uid: System.IEquatable{JsonCons.JsonPathLib.NormalizedPath}.Equals(JsonCons.JsonPathLib.NormalizedPath)
  commentId: M:System.IEquatable{JsonCons.JsonPathLib.NormalizedPath}.Equals(JsonCons.JsonPathLib.NormalizedPath)
  parent: System.IEquatable{JsonCons.JsonPathLib.NormalizedPath}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(NormalizedPath)
  nameWithType: IEquatable<NormalizedPath>.Equals(NormalizedPath)
  fullName: System.IEquatable<JsonCons.JsonPathLib.NormalizedPath>.Equals(JsonCons.JsonPathLib.NormalizedPath)
  nameWithType.vb: IEquatable(Of NormalizedPath).Equals(NormalizedPath)
  fullName.vb: System.IEquatable(Of JsonCons.JsonPathLib.NormalizedPath).Equals(JsonCons.JsonPathLib.NormalizedPath)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<NormalizedPath>.Equals
    fullName: System.IEquatable<JsonCons.JsonPathLib.NormalizedPath>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: JsonCons.JsonPathLib.NormalizedPath
    name: NormalizedPath
    nameWithType: NormalizedPath
    fullName: JsonCons.JsonPathLib.NormalizedPath
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of NormalizedPath).Equals
    fullName: System.IEquatable(Of JsonCons.JsonPathLib.NormalizedPath).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: JsonCons.JsonPathLib.NormalizedPath
    name: NormalizedPath
    nameWithType: NormalizedPath
    fullName: JsonCons.JsonPathLib.NormalizedPath
  - name: )
    nameWithType: )
    fullName: )
- uid: JsonCons.JsonPathLib.NormalizedPath
  commentId: T:JsonCons.JsonPathLib.NormalizedPath
  parent: JsonCons.JsonPathLib
  name: NormalizedPath
  nameWithType: NormalizedPath
  fullName: JsonCons.JsonPathLib.NormalizedPath
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: JsonCons.JsonPathLib.NormalizedPath.CompareTo*
  commentId: Overload:JsonCons.JsonPathLib.NormalizedPath.CompareTo
  name: CompareTo
  nameWithType: NormalizedPath.CompareTo
  fullName: JsonCons.JsonPathLib.NormalizedPath.CompareTo
- uid: System.IComparable{JsonCons.JsonPathLib.NormalizedPath}.CompareTo(JsonCons.JsonPathLib.NormalizedPath)
  commentId: M:System.IComparable{JsonCons.JsonPathLib.NormalizedPath}.CompareTo(JsonCons.JsonPathLib.NormalizedPath)
  parent: System.IComparable{JsonCons.JsonPathLib.NormalizedPath}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(NormalizedPath)
  nameWithType: IComparable<NormalizedPath>.CompareTo(NormalizedPath)
  fullName: System.IComparable<JsonCons.JsonPathLib.NormalizedPath>.CompareTo(JsonCons.JsonPathLib.NormalizedPath)
  nameWithType.vb: IComparable(Of NormalizedPath).CompareTo(NormalizedPath)
  fullName.vb: System.IComparable(Of JsonCons.JsonPathLib.NormalizedPath).CompareTo(JsonCons.JsonPathLib.NormalizedPath)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<NormalizedPath>.CompareTo
    fullName: System.IComparable<JsonCons.JsonPathLib.NormalizedPath>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: JsonCons.JsonPathLib.NormalizedPath
    name: NormalizedPath
    nameWithType: NormalizedPath
    fullName: JsonCons.JsonPathLib.NormalizedPath
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of NormalizedPath).CompareTo
    fullName: System.IComparable(Of JsonCons.JsonPathLib.NormalizedPath).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: JsonCons.JsonPathLib.NormalizedPath
    name: NormalizedPath
    nameWithType: NormalizedPath
    fullName: JsonCons.JsonPathLib.NormalizedPath
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: JsonCons.JsonPathLib.NormalizedPath.GetHashCode*
  commentId: Overload:JsonCons.JsonPathLib.NormalizedPath.GetHashCode
  name: GetHashCode
  nameWithType: NormalizedPath.GetHashCode
  fullName: JsonCons.JsonPathLib.NormalizedPath.GetHashCode
- uid: JsonCons.JsonPathLib.NormalizedPath.TryGet*
  commentId: Overload:JsonCons.JsonPathLib.NormalizedPath.TryGet
  name: TryGet
  nameWithType: NormalizedPath.TryGet
  fullName: JsonCons.JsonPathLib.NormalizedPath.TryGet
- uid: System.Text.Json.JsonElement
  commentId: T:System.Text.Json.JsonElement
  parent: System.Text.Json
  isExternal: true
  name: JsonElement
  nameWithType: JsonElement
  fullName: System.Text.Json.JsonElement
- uid: System.Text.Json
  commentId: N:System.Text.Json
  isExternal: true
  name: System.Text.Json
  nameWithType: System.Text.Json
  fullName: System.Text.Json
