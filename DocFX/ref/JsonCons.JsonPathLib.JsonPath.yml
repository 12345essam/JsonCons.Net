### YamlMime:ManagedReference
items:
- uid: JsonCons.JsonPathLib.JsonPath
  commentId: T:JsonCons.JsonPathLib.JsonPath
  id: JsonPath
  parent: JsonCons.JsonPathLib
  children:
  - JsonCons.JsonPathLib.JsonPath.Parse(System.String)
  - JsonCons.JsonPathLib.JsonPath.Select(System.Text.Json.JsonElement,JsonCons.JsonPathLib.ResultOptions)
  - JsonCons.JsonPathLib.JsonPath.Select(System.Text.Json.JsonElement,System.String,JsonCons.JsonPathLib.ResultOptions)
  - JsonCons.JsonPathLib.JsonPath.SelectNodes(System.Text.Json.JsonElement,JsonCons.JsonPathLib.ResultOptions)
  - JsonCons.JsonPathLib.JsonPath.SelectNodes(System.Text.Json.JsonElement,System.String,JsonCons.JsonPathLib.ResultOptions)
  - JsonCons.JsonPathLib.JsonPath.SelectPaths(System.Text.Json.JsonElement,JsonCons.JsonPathLib.ResultOptions)
  - JsonCons.JsonPathLib.JsonPath.SelectPaths(System.Text.Json.JsonElement,System.String,JsonCons.JsonPathLib.ResultOptions)
  - JsonCons.JsonPathLib.JsonPath.TrySelectSingle(System.Text.Json.JsonElement,JsonCons.JsonPathLib.NormalizedPath,System.Text.Json.JsonElement@)
  langs:
  - csharp
  - vb
  name: JsonPath
  nameWithType: JsonPath
  fullName: JsonCons.JsonPathLib.JsonPath
  type: Class
  source:
    remote:
      path: src/JsonPath/JsonPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: JsonPath
    path: ../src/JsonPath/JsonPath.cs
    startLine: 58
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  summary: "\nRepresents a JsonPath expression.\n"
  example: []
  syntax:
    content: public sealed class JsonPath
    content.vb: Public NotInheritable Class JsonPath
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: JsonCons.JsonPathLib.JsonPath.Parse(System.String)
  commentId: M:JsonCons.JsonPathLib.JsonPath.Parse(System.String)
  id: Parse(System.String)
  parent: JsonCons.JsonPathLib.JsonPath
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: JsonPath.Parse(String)
  fullName: JsonCons.JsonPathLib.JsonPath.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/JsonPath/JsonPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: Parse
    path: ../src/JsonPath/JsonPath.cs
    startLine: 73
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  summary: "\nParses a JSONPath string into a JsonPath, for &quot;parse once, use many times&quot;.\nA JsonPath instance is thread safe and has no mutable state.\n"
  example: []
  syntax:
    content: public static JsonPath Parse(string pathStr)
    parameters:
    - id: pathStr
      type: System.String
      description: A JSONPath string.
    return:
      type: JsonCons.JsonPathLib.JsonPath
      description: A JsonPath.
    content.vb: Public Shared Function Parse(pathStr As String) As JsonPath
  overload: JsonCons.JsonPathLib.JsonPath.Parse*
  exceptions:
  - type: JsonCons.JsonPathLib.JsonPathParseException
    commentId: T:JsonCons.JsonPathLib.JsonPathParseException
    description: "\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">pathStr</code> parameter is not a valid JSONPath expression.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: JsonCons.JsonPathLib.JsonPath.Select(System.Text.Json.JsonElement,JsonCons.JsonPathLib.ResultOptions)
  commentId: M:JsonCons.JsonPathLib.JsonPath.Select(System.Text.Json.JsonElement,JsonCons.JsonPathLib.ResultOptions)
  id: Select(System.Text.Json.JsonElement,JsonCons.JsonPathLib.ResultOptions)
  parent: JsonCons.JsonPathLib.JsonPath
  langs:
  - csharp
  - vb
  name: Select(JsonElement, ResultOptions)
  nameWithType: JsonPath.Select(JsonElement, ResultOptions)
  fullName: JsonCons.JsonPathLib.JsonPath.Select(System.Text.Json.JsonElement, JsonCons.JsonPathLib.ResultOptions)
  type: Method
  source:
    remote:
      path: src/JsonPath/JsonPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: Select
    path: ../src/JsonPath/JsonPath.cs
    startLine: 96
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  summary: "\nSelects values within the root value that match this JSONPath expression. \n"
  example: []
  syntax:
    content: public IList<JsonElement> Select(JsonElement root, ResultOptions options = (ResultOptions)0)
    parameters:
    - id: root
      type: System.Text.Json.JsonElement
      description: The root value.
    - id: options
      type: JsonCons.JsonPathLib.ResultOptions
      description: Options for handling duplicate paths and order of results.
    return:
      type: System.Collections.Generic.IList{System.Text.Json.JsonElement}
      description: A list of values within the root value that match this JSONPath expression
    content.vb: Public Function Select(root As JsonElement, options As ResultOptions = CType(0, ResultOptions)) As IList(Of JsonElement)
  overload: JsonCons.JsonPathLib.JsonPath.Select*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: JsonCons.JsonPathLib.JsonPath.SelectPaths(System.Text.Json.JsonElement,JsonCons.JsonPathLib.ResultOptions)
  commentId: M:JsonCons.JsonPathLib.JsonPath.SelectPaths(System.Text.Json.JsonElement,JsonCons.JsonPathLib.ResultOptions)
  id: SelectPaths(System.Text.Json.JsonElement,JsonCons.JsonPathLib.ResultOptions)
  parent: JsonCons.JsonPathLib.JsonPath
  langs:
  - csharp
  - vb
  name: SelectPaths(JsonElement, ResultOptions)
  nameWithType: JsonPath.SelectPaths(JsonElement, ResultOptions)
  fullName: JsonCons.JsonPathLib.JsonPath.SelectPaths(System.Text.Json.JsonElement, JsonCons.JsonPathLib.ResultOptions)
  type: Method
  source:
    remote:
      path: src/JsonPath/JsonPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: SelectPaths
    path: ../src/JsonPath/JsonPath.cs
    startLine: 170
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  summary: "\nSelects paths identifying the values within the root value that match this JSONPath expression. \n"
  example: []
  syntax:
    content: public IList<NormalizedPath> SelectPaths(JsonElement root, ResultOptions options = ResultOptions.Path)
    parameters:
    - id: root
      type: System.Text.Json.JsonElement
      description: The root value.
    - id: options
      type: JsonCons.JsonPathLib.ResultOptions
      description: Options for handling duplicate paths and order of results.
    return:
      type: System.Collections.Generic.IList{JsonCons.JsonPathLib.NormalizedPath}
      description: A list of <xref href="JsonCons.JsonPathLib.NormalizedPath" data-throw-if-not-resolved="false"></xref> identifying the values within the root value that match this JSONPath expression
    content.vb: Public Function SelectPaths(root As JsonElement, options As ResultOptions = ResultOptions.Path) As IList(Of NormalizedPath)
  overload: JsonCons.JsonPathLib.JsonPath.SelectPaths*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: JsonCons.JsonPathLib.JsonPath.SelectNodes(System.Text.Json.JsonElement,JsonCons.JsonPathLib.ResultOptions)
  commentId: M:JsonCons.JsonPathLib.JsonPath.SelectNodes(System.Text.Json.JsonElement,JsonCons.JsonPathLib.ResultOptions)
  id: SelectNodes(System.Text.Json.JsonElement,JsonCons.JsonPathLib.ResultOptions)
  parent: JsonCons.JsonPathLib.JsonPath
  langs:
  - csharp
  - vb
  name: SelectNodes(JsonElement, ResultOptions)
  nameWithType: JsonPath.SelectNodes(JsonElement, ResultOptions)
  fullName: JsonCons.JsonPathLib.JsonPath.SelectNodes(System.Text.Json.JsonElement, JsonCons.JsonPathLib.ResultOptions)
  type: Method
  source:
    remote:
      path: src/JsonPath/JsonPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: SelectNodes
    path: ../src/JsonPath/JsonPath.cs
    startLine: 222
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  summary: "\nSelects nodes that represent location-value pairs within the root value that match this JSONPath expression. \n"
  example: []
  syntax:
    content: public IList<JsonPathNode> SelectNodes(JsonElement root, ResultOptions options = ResultOptions.Path)
    parameters:
    - id: root
      type: System.Text.Json.JsonElement
      description: The root value.
    - id: options
      type: JsonCons.JsonPathLib.ResultOptions
      description: Options for handling duplicate paths and order of results.
    return:
      type: System.Collections.Generic.IList{JsonCons.JsonPathLib.JsonPathNode}
      description: "A list of <xref href=\"JsonCons.JsonPathLib.JsonPathNode\" data-throw-if-not-resolved=\"false\"></xref> representing locations-value pairs \nwithin the root value that match this JSONPath expression"
    content.vb: Public Function SelectNodes(root As JsonElement, options As ResultOptions = ResultOptions.Path) As IList(Of JsonPathNode)
  overload: JsonCons.JsonPathLib.JsonPath.SelectNodes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: JsonCons.JsonPathLib.JsonPath.Select(System.Text.Json.JsonElement,System.String,JsonCons.JsonPathLib.ResultOptions)
  commentId: M:JsonCons.JsonPathLib.JsonPath.Select(System.Text.Json.JsonElement,System.String,JsonCons.JsonPathLib.ResultOptions)
  id: Select(System.Text.Json.JsonElement,System.String,JsonCons.JsonPathLib.ResultOptions)
  parent: JsonCons.JsonPathLib.JsonPath
  langs:
  - csharp
  - vb
  name: Select(JsonElement, String, ResultOptions)
  nameWithType: JsonPath.Select(JsonElement, String, ResultOptions)
  fullName: JsonCons.JsonPathLib.JsonPath.Select(System.Text.Json.JsonElement, System.String, JsonCons.JsonPathLib.ResultOptions)
  type: Method
  source:
    remote:
      path: src/JsonPath/JsonPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: Select
    path: ../src/JsonPath/JsonPath.cs
    startLine: 277
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  summary: "\nSelects values within the root value that match the provided JSONPath expression. \nThis method parses and applies the expression in one operation.\n"
  example: []
  syntax:
    content: public static IList<JsonElement> Select(JsonElement root, string pathStr, ResultOptions options = (ResultOptions)0)
    parameters:
    - id: root
      type: System.Text.Json.JsonElement
      description: The root value.
    - id: pathStr
      type: System.String
      description: A JSONPath string.
    - id: options
      type: JsonCons.JsonPathLib.ResultOptions
      description: Options for handling duplicate paths and order of results.
    return:
      type: System.Collections.Generic.IList{System.Text.Json.JsonElement}
      description: A list of values within the root value that match the provided JSONPath expression
    content.vb: Public Shared Function Select(root As JsonElement, pathStr As String, options As ResultOptions = CType(0, ResultOptions)) As IList(Of JsonElement)
  overload: JsonCons.JsonPathLib.JsonPath.Select*
  exceptions:
  - type: JsonCons.JsonPathLib.JsonPathParseException
    commentId: T:JsonCons.JsonPathLib.JsonPathParseException
    description: "\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">pathStr</code> parameter is not a valid JSONPath expression.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: JsonCons.JsonPathLib.JsonPath.SelectPaths(System.Text.Json.JsonElement,System.String,JsonCons.JsonPathLib.ResultOptions)
  commentId: M:JsonCons.JsonPathLib.JsonPath.SelectPaths(System.Text.Json.JsonElement,System.String,JsonCons.JsonPathLib.ResultOptions)
  id: SelectPaths(System.Text.Json.JsonElement,System.String,JsonCons.JsonPathLib.ResultOptions)
  parent: JsonCons.JsonPathLib.JsonPath
  langs:
  - csharp
  - vb
  name: SelectPaths(JsonElement, String, ResultOptions)
  nameWithType: JsonPath.SelectPaths(JsonElement, String, ResultOptions)
  fullName: JsonCons.JsonPathLib.JsonPath.SelectPaths(System.Text.Json.JsonElement, System.String, JsonCons.JsonPathLib.ResultOptions)
  type: Method
  source:
    remote:
      path: src/JsonPath/JsonPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: SelectPaths
    path: ../src/JsonPath/JsonPath.cs
    startLine: 295
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  summary: "\nSelects paths identifying the values within the root value that match the JSONPath expression. \nThis method parses and applies the expression in one operation.\n"
  example: []
  syntax:
    content: public static IList<NormalizedPath> SelectPaths(JsonElement root, string pathStr, ResultOptions options = ResultOptions.Path)
    parameters:
    - id: root
      type: System.Text.Json.JsonElement
      description: The root value.
    - id: pathStr
      type: System.String
      description: A JSONPath string.
    - id: options
      type: JsonCons.JsonPathLib.ResultOptions
      description: Options for handling duplicate paths and order of results.
    return:
      type: System.Collections.Generic.IList{JsonCons.JsonPathLib.NormalizedPath}
      description: A list of <xref href="JsonCons.JsonPathLib.NormalizedPath" data-throw-if-not-resolved="false"></xref> identifying the values within the root value that match the provided JSONPath expression
    content.vb: Public Shared Function SelectPaths(root As JsonElement, pathStr As String, options As ResultOptions = ResultOptions.Path) As IList(Of NormalizedPath)
  overload: JsonCons.JsonPathLib.JsonPath.SelectPaths*
  exceptions:
  - type: JsonCons.JsonPathLib.JsonPathParseException
    commentId: T:JsonCons.JsonPathLib.JsonPathParseException
    description: "\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">pathStr</code> parameter is not a valid JSONPath expression.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: JsonCons.JsonPathLib.JsonPath.SelectNodes(System.Text.Json.JsonElement,System.String,JsonCons.JsonPathLib.ResultOptions)
  commentId: M:JsonCons.JsonPathLib.JsonPath.SelectNodes(System.Text.Json.JsonElement,System.String,JsonCons.JsonPathLib.ResultOptions)
  id: SelectNodes(System.Text.Json.JsonElement,System.String,JsonCons.JsonPathLib.ResultOptions)
  parent: JsonCons.JsonPathLib.JsonPath
  langs:
  - csharp
  - vb
  name: SelectNodes(JsonElement, String, ResultOptions)
  nameWithType: JsonPath.SelectNodes(JsonElement, String, ResultOptions)
  fullName: JsonCons.JsonPathLib.JsonPath.SelectNodes(System.Text.Json.JsonElement, System.String, JsonCons.JsonPathLib.ResultOptions)
  type: Method
  source:
    remote:
      path: src/JsonPath/JsonPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: SelectNodes
    path: ../src/JsonPath/JsonPath.cs
    startLine: 314
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  summary: "\nSelects nodes that represent location-value pairs within the root value that match the JSONPath expression. \nThis method parses and applies the expression in one operation.\n"
  example: []
  syntax:
    content: public static IList<JsonPathNode> SelectNodes(JsonElement root, string pathStr, ResultOptions options = ResultOptions.Path)
    parameters:
    - id: root
      type: System.Text.Json.JsonElement
      description: The root value.
    - id: pathStr
      type: System.String
      description: A JSONPath string.
    - id: options
      type: JsonCons.JsonPathLib.ResultOptions
      description: Options for handling duplicate paths and order of results.
    return:
      type: System.Collections.Generic.IList{JsonCons.JsonPathLib.JsonPathNode}
      description: "A list of <xref href=\"JsonCons.JsonPathLib.JsonPathNode\" data-throw-if-not-resolved=\"false\"></xref> representing locations-value pairs \nwithin the root value that match the provided JSONPath expression"
    content.vb: Public Shared Function SelectNodes(root As JsonElement, pathStr As String, options As ResultOptions = ResultOptions.Path) As IList(Of JsonPathNode)
  overload: JsonCons.JsonPathLib.JsonPath.SelectNodes*
  exceptions:
  - type: JsonCons.JsonPathLib.JsonPathParseException
    commentId: T:JsonCons.JsonPathLib.JsonPathParseException
    description: "\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">pathStr</code> parameter is not a valid JSONPath expression.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: JsonCons.JsonPathLib.JsonPath.TrySelectSingle(System.Text.Json.JsonElement,JsonCons.JsonPathLib.NormalizedPath,System.Text.Json.JsonElement@)
  commentId: M:JsonCons.JsonPathLib.JsonPath.TrySelectSingle(System.Text.Json.JsonElement,JsonCons.JsonPathLib.NormalizedPath,System.Text.Json.JsonElement@)
  id: TrySelectSingle(System.Text.Json.JsonElement,JsonCons.JsonPathLib.NormalizedPath,System.Text.Json.JsonElement@)
  parent: JsonCons.JsonPathLib.JsonPath
  langs:
  - csharp
  - vb
  name: TrySelectSingle(JsonElement, NormalizedPath, out JsonElement)
  nameWithType: JsonPath.TrySelectSingle(JsonElement, NormalizedPath, out JsonElement)
  fullName: JsonCons.JsonPathLib.JsonPath.TrySelectSingle(System.Text.Json.JsonElement, JsonCons.JsonPathLib.NormalizedPath, out System.Text.Json.JsonElement)
  type: Method
  source:
    remote:
      path: src/JsonPath/JsonPath.cs
      branch: main
      repo: https://github.com/danielaparker/JsonCons.Net.git
    id: TrySelectSingle
    path: ../src/JsonPath/JsonPath.cs
    startLine: 331
  assemblies:
  - JsonPath
  namespace: JsonCons.JsonPathLib
  summary: "\nLooks for a value within the root value that matches the provided normalized path, returning\n<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if such a value exists, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise. When the value exists <code data-dev-comment-type=\"paramref\" class=\"paramref\">element</code>\nis assigned that value.\n"
  example: []
  syntax:
    content: public bool TrySelectSingle(JsonElement root, NormalizedPath path, out JsonElement element)
    parameters:
    - id: root
      type: System.Text.Json.JsonElement
    - id: path
      type: JsonCons.JsonPathLib.NormalizedPath
      description: A <xref href="JsonCons.JsonPathLib.NormalizedPath" data-throw-if-not-resolved="false"></xref> identifying a single value within the root value.
    - id: element
      type: System.Text.Json.JsonElement
      description: Receives the value.
    return:
      type: System.Boolean
      description: "\n<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the value was found, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise.\n"
    content.vb: Public Function TrySelectSingle(root As JsonElement, path As NormalizedPath, ByRef element As JsonElement) As Boolean
  overload: JsonCons.JsonPathLib.JsonPath.TrySelectSingle*
  nameWithType.vb: JsonPath.TrySelectSingle(JsonElement, NormalizedPath, ByRef JsonElement)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: JsonCons.JsonPathLib.JsonPath.TrySelectSingle(System.Text.Json.JsonElement, JsonCons.JsonPathLib.NormalizedPath, ByRef System.Text.Json.JsonElement)
  name.vb: TrySelectSingle(JsonElement, NormalizedPath, ByRef JsonElement)
references:
- uid: JsonCons.JsonPathLib
  commentId: N:JsonCons.JsonPathLib
  name: JsonCons.JsonPathLib
  nameWithType: JsonCons.JsonPathLib
  fullName: JsonCons.JsonPathLib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: JsonCons.JsonPathLib.JsonPathParseException
  commentId: T:JsonCons.JsonPathLib.JsonPathParseException
  name: JsonPathParseException
  nameWithType: JsonPathParseException
  fullName: JsonCons.JsonPathLib.JsonPathParseException
- uid: JsonCons.JsonPathLib.JsonPath.Parse*
  commentId: Overload:JsonCons.JsonPathLib.JsonPath.Parse
  name: Parse
  nameWithType: JsonPath.Parse
  fullName: JsonCons.JsonPathLib.JsonPath.Parse
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: JsonCons.JsonPathLib.JsonPath
  commentId: T:JsonCons.JsonPathLib.JsonPath
  parent: JsonCons.JsonPathLib
  name: JsonPath
  nameWithType: JsonPath
  fullName: JsonCons.JsonPathLib.JsonPath
- uid: JsonCons.JsonPathLib.JsonPath.Select*
  commentId: Overload:JsonCons.JsonPathLib.JsonPath.Select
  name: Select
  nameWithType: JsonPath.Select
  fullName: JsonCons.JsonPathLib.JsonPath.Select
- uid: System.Text.Json.JsonElement
  commentId: T:System.Text.Json.JsonElement
  parent: System.Text.Json
  isExternal: true
  name: JsonElement
  nameWithType: JsonElement
  fullName: System.Text.Json.JsonElement
- uid: JsonCons.JsonPathLib.ResultOptions
  commentId: T:JsonCons.JsonPathLib.ResultOptions
  parent: JsonCons.JsonPathLib
  name: ResultOptions
  nameWithType: ResultOptions
  fullName: JsonCons.JsonPathLib.ResultOptions
- uid: System.Collections.Generic.IList{System.Text.Json.JsonElement}
  commentId: T:System.Collections.Generic.IList{System.Text.Json.JsonElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<JsonElement>
  nameWithType: IList<JsonElement>
  fullName: System.Collections.Generic.IList<System.Text.Json.JsonElement>
  nameWithType.vb: IList(Of JsonElement)
  fullName.vb: System.Collections.Generic.IList(Of System.Text.Json.JsonElement)
  name.vb: IList(Of JsonElement)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Text.Json.JsonElement
    name: JsonElement
    nameWithType: JsonElement
    fullName: System.Text.Json.JsonElement
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Text.Json.JsonElement
    name: JsonElement
    nameWithType: JsonElement
    fullName: System.Text.Json.JsonElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.Json
  commentId: N:System.Text.Json
  isExternal: true
  name: System.Text.Json
  nameWithType: System.Text.Json
  fullName: System.Text.Json
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: JsonCons.JsonPathLib.NormalizedPath
  commentId: T:JsonCons.JsonPathLib.NormalizedPath
  parent: JsonCons.JsonPathLib
  name: NormalizedPath
  nameWithType: NormalizedPath
  fullName: JsonCons.JsonPathLib.NormalizedPath
- uid: JsonCons.JsonPathLib.JsonPath.SelectPaths*
  commentId: Overload:JsonCons.JsonPathLib.JsonPath.SelectPaths
  name: SelectPaths
  nameWithType: JsonPath.SelectPaths
  fullName: JsonCons.JsonPathLib.JsonPath.SelectPaths
- uid: System.Collections.Generic.IList{JsonCons.JsonPathLib.NormalizedPath}
  commentId: T:System.Collections.Generic.IList{JsonCons.JsonPathLib.NormalizedPath}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<NormalizedPath>
  nameWithType: IList<NormalizedPath>
  fullName: System.Collections.Generic.IList<JsonCons.JsonPathLib.NormalizedPath>
  nameWithType.vb: IList(Of NormalizedPath)
  fullName.vb: System.Collections.Generic.IList(Of JsonCons.JsonPathLib.NormalizedPath)
  name.vb: IList(Of NormalizedPath)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: JsonCons.JsonPathLib.NormalizedPath
    name: NormalizedPath
    nameWithType: NormalizedPath
    fullName: JsonCons.JsonPathLib.NormalizedPath
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: JsonCons.JsonPathLib.NormalizedPath
    name: NormalizedPath
    nameWithType: NormalizedPath
    fullName: JsonCons.JsonPathLib.NormalizedPath
  - name: )
    nameWithType: )
    fullName: )
- uid: JsonCons.JsonPathLib.JsonPathNode
  commentId: T:JsonCons.JsonPathLib.JsonPathNode
  parent: JsonCons.JsonPathLib
  name: JsonPathNode
  nameWithType: JsonPathNode
  fullName: JsonCons.JsonPathLib.JsonPathNode
- uid: JsonCons.JsonPathLib.JsonPath.SelectNodes*
  commentId: Overload:JsonCons.JsonPathLib.JsonPath.SelectNodes
  name: SelectNodes
  nameWithType: JsonPath.SelectNodes
  fullName: JsonCons.JsonPathLib.JsonPath.SelectNodes
- uid: System.Collections.Generic.IList{JsonCons.JsonPathLib.JsonPathNode}
  commentId: T:System.Collections.Generic.IList{JsonCons.JsonPathLib.JsonPathNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<JsonPathNode>
  nameWithType: IList<JsonPathNode>
  fullName: System.Collections.Generic.IList<JsonCons.JsonPathLib.JsonPathNode>
  nameWithType.vb: IList(Of JsonPathNode)
  fullName.vb: System.Collections.Generic.IList(Of JsonCons.JsonPathLib.JsonPathNode)
  name.vb: IList(Of JsonPathNode)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: JsonCons.JsonPathLib.JsonPathNode
    name: JsonPathNode
    nameWithType: JsonPathNode
    fullName: JsonCons.JsonPathLib.JsonPathNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: JsonCons.JsonPathLib.JsonPathNode
    name: JsonPathNode
    nameWithType: JsonPathNode
    fullName: JsonCons.JsonPathLib.JsonPathNode
  - name: )
    nameWithType: )
    fullName: )
- uid: JsonCons.JsonPathLib.JsonPath.TrySelectSingle*
  commentId: Overload:JsonCons.JsonPathLib.JsonPath.TrySelectSingle
  name: TrySelectSingle
  nameWithType: JsonPath.TrySelectSingle
  fullName: JsonCons.JsonPathLib.JsonPath.TrySelectSingle
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
