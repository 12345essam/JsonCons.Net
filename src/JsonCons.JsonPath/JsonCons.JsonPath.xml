<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonCons.JsonPath</name>
    </assembly>
    <members>
        <member name="T:JsonCons.JsonPath.JsonPathParseException">
            <summary>
            Defines a custom exception object that is thrown when JSONPath parsing fails.
            </summary>    
        </member>
        <member name="P:JsonCons.JsonPath.JsonPathParseException.LineNumber">
            <summary>
            The line in the JSONPath string where a parse error was detected.
            </summary>
        </member>
        <member name="P:JsonCons.JsonPath.JsonPathParseException.ColumnNumber">
            <summary>
            The column in the JSONPath string where a parse error was detected.
            </summary>
        </member>
        <member name="M:JsonCons.JsonPath.JsonPathParseException.ToString">
            <summary>
            Returns an error message that describes the current exception.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="T:JsonCons.JsonPath.JsonPathExecutionMode">
            <summary>
            Defines the options for executing selectors
            </summary>
        </member>
        <member name="F:JsonCons.JsonPath.JsonPathExecutionMode.Sequential">
            <summary>
            Executes selectors sequentially.
            </summary>
        </member>
        <member name="F:JsonCons.JsonPath.JsonPathExecutionMode.Parallel">
            <summary>
            Parallelizes execution of individual selectors in unions.
            </summary>
        </member>
        <member name="T:JsonCons.JsonPath.NodeSortBy">
            <summary>
            Defines the various ways a <see cref="T:JsonCons.JsonPath.JsonSelector"/> query can order the results.
            </summary>
        </member>
        <member name="F:JsonCons.JsonPath.NodeSortBy.Default">
            <summary>
            No sorting
            </summary>
        </member>
        <member name="F:JsonCons.JsonPath.NodeSortBy.Path">
            <summary>
            Sort by path
            </summary>
        </member>
        <member name="F:JsonCons.JsonPath.NodeSortBy.Value">
            <summary>
            Sort by <see cref="T:System.Text.Json.JsonElement"/> instances using the <see cref="T:JsonCons.Utilities.JsonElementComparer"/>.
            </summary>
        </member>
        <member name="T:JsonCons.JsonPath.JsonPathOptions">
            <summary>
            Defines options for processing JSONPath queries.
            </summary>
        </member>
        <member name="F:JsonCons.JsonPath.JsonPathOptions.Default">
            <summary>
            Gets a singleton instance of JsonPathOptions. NoDuplicates is false, 
            no sorting is in effect, MaximumDepth is 64, and execution mode is sequentional.
            </summary>
        </member>
        <member name="P:JsonCons.JsonPath.JsonPathOptions.NoDuplicates">
            <summary>
            Remove items from results that correspond to the same path.
            </summary>
        </member>
        <member name="P:JsonCons.JsonPath.JsonPathOptions.SortBy">
            <summary>
            Sort <see cref="T:System.Text.Json.JsonElement"/> instances using the <see cref="T:JsonCons.Utilities.JsonElementComparer"/>.
            </summary>
        </member>
        <member name="P:JsonCons.JsonPath.JsonPathOptions.MaxDepth">
            <summary>
            Gets or sets the depth limit for recursive descent, with the default value a maximum depth of 64.
            </summary>
        </member>
        <member name="P:JsonCons.JsonPath.JsonPathOptions.ExecutionMode">
            <summary>
            Gets or sets the execution mode.
            </summary>
        </member>
        <member name="T:JsonCons.JsonPath.ProcessingFlags">
             <summary>
             Defines the various ways a <see cref="T:JsonCons.JsonPath.JsonSelector"/> query can deal with duplicate
             paths and order of results.
            
             This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:JsonCons.JsonPath.ProcessingFlags.Path">
            <summary>
            This bit indicates that paths are required and is automatically set as needed, e.g.
            if NoDups is set.
            </summary>
        </member>
        <member name="F:JsonCons.JsonPath.ProcessingFlags.NoDups">
            <summary>
            Remove items from results that correspond to the same path.
            </summary>
        </member>
        <member name="F:JsonCons.JsonPath.ProcessingFlags.SortByPath">
            <summary>
            Sort results by path.
            </summary>
        </member>
        <member name="T:JsonCons.JsonPath.JsonSelector">
            <summary>
              Provides functionality for retrieving selected values from a root <see href="https://docs.microsoft.com/en-us/dotnet/api/system.text.json.jsonelement?view=net-5.0">JsonElement</see>.
            </summary>
            <example>
            The following example shows how to select values, paths, and nodes from a JSON document
            <code>
            using System;
            using System.Diagnostics;
            using System.Text.Json;
            using JsonCons.Utilities;
            
            public class Example
            {
                public static void Main()
                {
                    string jsonString = @"
            {
                ""books"":
                [
                    {
                        ""category"": ""fiction"",
                        ""title"" : ""A Wild Sheep Chase"",
                        ""author"" : ""Haruki Murakami"",
                        ""price"" : 22.72
                    },
                    {
                        ""category"": ""fiction"",
                        ""title"" : ""The Night Watch"",
                        ""author"" : ""Sergei Lukyanenko"",
                        ""price"" : 23.58
                    },
                    {
                        ""category"": ""fiction"",
                        ""title"" : ""The Comedians"",
                        ""author"" : ""Graham Greene"",
                        ""price"" : 21.99
                    },
                    {
                        ""category"": ""memoir"",
                        ""title"" : ""The Night Watch"",
                        ""author"" : ""David Atlee Phillips"",
                        ""price"" : 260.90
                    }
                ]
            }
                    ");
                    
                    using JsonDocument doc = JsonDocument.Parse(jsonString);
                    
                    var options = new JsonSerializerOptions() {WriteIndented = true};
                    
                    // Selector of titles from union of all books with category 'memoir' 
                    // and all books with price > 23
                    var selector = JsonSelector.Parse("$.books[?@.category=='memoir',?@.price > 23].title");
                    
                    Console.WriteLine("Select values");
                    IList&lt;JsonElement> values = selector.Select(doc.RootElement);
                    foreach (var value in values)
                    {
                        Console.WriteLine(JsonSerializer.Serialize(value, options));
                    }
                    Console.WriteLine();
                    
                    Console.WriteLine("Select paths");
                    IList&lt;NormalizedPath> paths = selector.SelectPaths(doc.RootElement);
                    foreach (var path in paths)
                    {
                        Console.WriteLine(path);
                    }
                    Console.WriteLine();
                    
                    Console.WriteLine("Select nodes");
                    IList&lt;PathValuePair> nodes = selector.SelectNodes(doc.RootElement);
                    foreach (var node in nodes)
                    {
                        Console.WriteLine($"{node.Path} => {JsonSerializer.Serialize(node.Value, options)}");
                    }
                    Console.WriteLine();
                    
                    Console.WriteLine("Remove duplicate nodes");
                    IList&lt;PathValuePair> uniqueNodes = selector.SelectNodes(doc.RootElement, 
                                                                new JsonPathOptions{NoDuplicates=true});
                    foreach (var node in uniqueNodes)
                    {
                        Console.WriteLine($"{node.Path} => {JsonSerializer.Serialize(node.Value, options)}");
                    }
                    Console.WriteLine();
                }
            }
            </code>
            Output:
            
            <code>
            Select values
            "The Night Watch"
            "The Night Watch"
            "The Night Watch"
            
            Select paths
            $['books'][3]['title']
            $['books'][1]['title']
            $['books'][3]['title']
            
            Select nodes
            $['books'][3]['title'] => "The Night Watch"
            $['books'][1]['title'] => "The Night Watch"
            $['books'][3]['title'] => "The Night Watch"
            
            Remove duplicate nodes
            $['books'][3]['title'] => "The Night Watch"
            $['books'][1]['title'] => "The Night Watch"
            </code>
            </example>
        </member>
        <member name="M:JsonCons.JsonPath.JsonSelector.Parse(System.String)">
            <summary>
            Parses a JSONPath string into a <see cref="T:JsonCons.JsonPath.JsonSelector"/>, for "parse once, use many times".
            A <see cref="T:JsonCons.JsonPath.JsonSelector"/> instance is thread safe and has no mutable state.
            </summary>
            <param name="jsonPath">A JSONPath string.</param>
            <returns>A <see cref="T:JsonCons.JsonPath.JsonSelector"/>.</returns>
            <exception cref="T:JsonCons.JsonPath.JsonPathParseException">
              The <paramref name="jsonPath"/> parameter is not a valid JSONPath expression.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              The <paramref name="jsonPath"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:JsonCons.JsonPath.JsonSelector.Select(System.Text.Json.JsonElement,JsonCons.JsonPath.JsonPathOptions)">
            <summary>
            Selects values within the root value matched by this JSONPath expression. 
            </summary>
            <param name="root">The root value.</param>
            <param name="options">Defines options for processing JSONPath queries.</param>
            <returns>A list of values within the root value matched by this JSONPath expression,
             or an empty list if none were matched.</returns>
            <exception cref="T:System.InvalidOperationException">
              Maximum depth level exceeded in recursive descent selector.
            </exception>
        </member>
        <member name="M:JsonCons.JsonPath.JsonSelector.SelectPaths(System.Text.Json.JsonElement,JsonCons.JsonPath.JsonPathOptions)">
            <summary>
            Selects paths identifying the values within the root value matched by this JSONPath expression. 
            </summary>
            <param name="root">The root value.</param>
            <param name="options">Defines options for processing JSONPath queries.</param>
            <returns>A list of <see cref="T:JsonCons.JsonPath.NormalizedPath"/> identifying the values within the root value matched by this JSONPath expression,
            or an empty list if none were matched.</returns>
        </member>
        <member name="M:JsonCons.JsonPath.JsonSelector.SelectNodes(System.Text.Json.JsonElement,JsonCons.JsonPath.JsonPathOptions)">
            <summary>
            Selects nodes that represent location-value pairs within the root value matched by this JSONPath expression. 
            </summary>
            <param name="root">The root value.</param>
            <param name="options">Defines options for processing JSONPath queries.</param>
            <returns>A list of <see cref="T:JsonCons.JsonPath.PathValuePair"/> representing location-value pairs 
            within the root value matched by this JSONPath expression,
            or an empty list if none were matched.</returns>
        </member>
        <member name="M:JsonCons.JsonPath.JsonSelector.Select(System.Text.Json.JsonElement,System.String,JsonCons.JsonPath.JsonPathOptions)">
            <summary>
            Selects values within the root value matched by the provided JSONPath expression. 
            This method parses and applies the expression in one operation.
            </summary>
            <param name="root">The root value.</param>
            <param name="jsonPath">A JSONPath string.</param>
            <param name="options">Defines options for processing JSONPath queries.</param>
            <returns>A list of values within the root value matched by the provided JSONPath expression,
            or an empty list if none were matched.</returns>
            <exception cref="T:JsonCons.JsonPath.JsonPathParseException">
              The <paramref name="jsonPath"/> parameter is not a valid JSONPath expression.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="jsonPath"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              Maximum depth level exceeded in recursive descent selector.
            </exception>
        </member>
        <member name="M:JsonCons.JsonPath.JsonSelector.SelectPaths(System.Text.Json.JsonElement,System.String,JsonCons.JsonPath.JsonPathOptions)">
            <summary>
            Selects paths identifying the values within the root value matched by the JSONPath expression. 
            This method parses and applies the expression in one operation.
            </summary>
            <param name="root">The root value.</param>
            <param name="jsonPath">A JSONPath string.</param>
            <param name="options">Defines options for processing JSONPath queries.</param>
            <returns>A list of <see cref="T:JsonCons.JsonPath.NormalizedPath"/> identifying the values within the root value matched by the provided JSONPath expression,
            or an empty list if none were matched.</returns>
            <exception cref="T:JsonCons.JsonPath.JsonPathParseException">
              The <paramref name="jsonPath"/> parameter is not a valid JSONPath expression.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="jsonPath"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              Maximum depth level exceeded in recursive descent selector.
            </exception>
        </member>
        <member name="M:JsonCons.JsonPath.JsonSelector.SelectNodes(System.Text.Json.JsonElement,System.String,JsonCons.JsonPath.JsonPathOptions)">
            <summary>
            Selects nodes that represent location-value pairs within the root value matched by the JSONPath expression. 
            This method parses and applies the expression in one operation.
            </summary>
            <param name="root">The root value.</param>
            <param name="jsonPath">A JSONPath string.</param>
            <param name="options">Defines options for processing JSONPath queries.</param>
            <returns>A list of <see cref="T:JsonCons.JsonPath.PathValuePair"/> representing location-value pairs 
            within the root value matched by the provided JSONPath expression,
            or an empty list if none were matched.</returns>
            <exception cref="T:JsonCons.JsonPath.JsonPathParseException">
              The <paramref name="jsonPath"/> parameter is not a valid JSONPath expression.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="jsonPath"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              Maximum depth level exceeded in recursive descent selector.
            </exception>
        </member>
        <member name="T:JsonCons.JsonPath.NormalizedPathNodeKind">
             <summary>
             Specifies the type of a path node.
            
             </summary>
        </member>
        <member name="F:JsonCons.JsonPath.NormalizedPathNodeKind.Root">
            <summary>
            Indicates the root path node
            </summary>
        </member>
        <member name="F:JsonCons.JsonPath.NormalizedPathNodeKind.Name">
            <summary>
            Indicates a path node that matches on property names.
            </summary>
        </member>
        <member name="F:JsonCons.JsonPath.NormalizedPathNodeKind.Index">
            <summary>
            Indicates a path node that matches on array indices.
            </summary>
        </member>
        <member name="T:JsonCons.JsonPath.NormalizedPathNode">
             <summary>
             Represents a node of a <see cref="T:JsonCons.JsonPath.NormalizedPath"/>.
            
             </summary>
        </member>
        <member name="P:JsonCons.JsonPath.NormalizedPathNode.Parent">
             <summary>
             Gets the parent of this path node.
            
             </summary>
        </member>
        <member name="P:JsonCons.JsonPath.NormalizedPathNode.ComponentKind">
             <summary>
             Gets the type of this path node.
            
             </summary>
        </member>
        <member name="P:JsonCons.JsonPath.NormalizedPathNode.Root">
             <summary>
             Gets a root node 
            
             </summary>
        </member>
        <member name="P:JsonCons.JsonPath.NormalizedPathNode.Current">
             <summary>
             Gets a current node 
            
             </summary>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPathNode.#ctor(JsonCons.JsonPath.NormalizedPathNode,System.String)">
            <summary>
            Constructs a path node from a parent and name
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="parent"/> is <see langword="null"/>.
              <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPathNode.#ctor(JsonCons.JsonPath.NormalizedPathNode,System.Int32)">
            <summary>
            Constructs a path node from a parent and an index
            </summary>
            <param name="parent">The parent.</param>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="parent"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPathNode.GetName">
             <summary>
             Gets the value of this NormalizedPathNode as a name.
            
             </summary>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPathNode.GetIndex">
             <summary>
             Gets the value of this NormalizedPathNode as an index.
            
             </summary>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPathNode.CompareTo(JsonCons.JsonPath.NormalizedPathNode)">
            <summary>
            Compares this instance with a specified NormalizedPathNode object and indicates 
            whether this instance precedes, follows, or appears in the same 
            position in the sort order as the specified NormalizedPathNode.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPathNode.GetHashCode">
            <summary>
            Returns the hash code for this NormalizedPathNode.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:JsonCons.JsonPath.NormalizedPath">
             <summary>
             Represents the location of a specific JSON value within a root JSON value.
            
             </summary>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPath.#ctor(JsonCons.JsonPath.NormalizedPathNode)">
             <summary>
             Constructs a normalized path from the last path node.
            
             </summary>
        </member>
        <member name="P:JsonCons.JsonPath.NormalizedPath.Last">
             <summary>
             Gets the last node of the normalized path. 
            
             </summary>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPath.GetEnumerator">
             <summary>
             Returns an enumerator that iterates through the components of the normalized path. 
            
             </summary>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPath.ToString">
             <summary>
             Gets a string representation for the normalized path. 
             The string will have the form $['aName']['anotherName'][anIndex]
             with any single quote characters appearing in names escaped with a backslash. 
            
             </summary>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPath.ToJsonPointer">
             <summary>
             Gets a <see href="https://datatracker.ietf.org/doc/html/rfc6901">JSON Pointer</see> representation for the normalized path. 
             The string will have the form /aName/anotherName/anIndex with any '~' and '/' characters appearing in names escaped as per the 
             specification.
            
             </summary>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPath.Equals(JsonCons.JsonPath.NormalizedPath)">
            <summary>
            Determines whether this instance and another specified NormalizedPath object have the same value.
            </summary>
            <param name="other">The NormalizedPath to compare to this instance.</param>
            <returns>true if the value of other is the same as the value of this instance; otherwise, false. If other is null, the method returns false.</returns>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPath.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a NormalizedPath object, have the same value.
            </summary>
            <param name="other">The NormalizedPath to compare to this instance.</param>
            <returns>true if other is a NormalizedPath and its value is the same as this instance; otherwise, false. If other is null, the method returns false.</returns>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPath.CompareTo(JsonCons.JsonPath.NormalizedPath)">
            <summary>
            Compares this instance with a specified NormalizedPath object and indicates 
            whether this instance precedes, follows, or appears in the same 
            position in the sort order as the specified NormalizedPath.
            </summary>
            <param name="other">The NormalizedPath to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, 
            follows, or appears in the same position in the sort order as other.</returns>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPath.GetHashCode">
            <summary>
            Returns the hash code for this NormalizedPath.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPath.TryGetValue(System.Text.Json.JsonElement,System.Text.Json.JsonElement@)">
            <summary>
              Looks for a value within the root value that matches this normalized path, returning
              <see langword="true"/> if such a value exists, <see langword="false"/> otherwise. When the value exists <paramref name="element"/>
              is assigned that value.
            </summary>
            <param name="root">The root value.</param>
            <param name="element">Receives the value.</param>
            <returns>
              <see langword="true"/> if the value was found, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:JsonCons.JsonPath.NormalizedPath.ContainsValue(System.Text.Json.JsonElement)">
            <summary>
              Looks for a value within the root value that matches this normalized path, returning
              <see langword="true"/> if such a value exists, <see langword="false"/> otherwise. 
            </summary>
            <param name="root">The root value.</param>
            <returns>
              <see langword="true"/> if the value was found, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:JsonCons.JsonPath.PathValuePair">
             <summary>
             Represents a specific location-value pair within a root JSON value.
            
             </summary>
        </member>
        <member name="P:JsonCons.JsonPath.PathValuePair.Path">
             <summary>
             Gets the location of this value within a root JSON value.
            
             </summary>
        </member>
        <member name="P:JsonCons.JsonPath.PathValuePair.Value">
             <summary>
             Gets the value
            
             </summary>
        </member>
        <member name="M:JsonCons.JsonPath.PathValuePair.Equals(JsonCons.JsonPath.PathValuePair)">
            <summary>
            Determines whether this instance and another specified PathValuePair object have the same value.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:JsonCons.JsonPath.PathValuePair.CompareTo(JsonCons.JsonPath.PathValuePair)">
            <summary>
            Compares this instance with a specified PathValuePair object and indicates 
            whether this instance precedes, follows, or appears in the same position 
            in the sort order as the specified PathValuePair.
            </summary>
            <param name="other"></param>
            <returns>true if the value of the other PathValuePair object is the same as the value of 
            this instance; otherwise, false. If other is null, the method returns false.</returns>
        </member>
        <member name="M:JsonCons.JsonPath.PathValuePair.GetHashCode">
            <summary>
            Returns the hash code for this PathValuePair.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
    </members>
</doc>
