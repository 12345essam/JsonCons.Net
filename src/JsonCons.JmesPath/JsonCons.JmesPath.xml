<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonCons.JmesPath</name>
    </assembly>
    <members>
        <member name="T:JsonCons.JmesPath.JmesPathParseException">
            <summary>
            Defines a custom exception object that is thrown when JMESPath parsing fails.
            </summary>    
        </member>
        <member name="P:JsonCons.JmesPath.JmesPathParseException.LineNumber">
            <summary>
            The line in the JMESPath string where a parse error was detected.
            </summary>
        </member>
        <member name="P:JsonCons.JmesPath.JmesPathParseException.ColumnNumber">
            <summary>
            The column in the JMESPath string where a parse error was detected.
            </summary>
        </member>
        <member name="M:JsonCons.JmesPath.JmesPathParseException.ToString">
            <summary>
            Returns an error message that describes the current exception.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="T:JsonCons.JmesPath.JsonTransformer">
            <summary>
            Provides functionality for applying a JMESPath expression to transform a JSON document into
            another JSON document
            </summary>
            <example>
            The following example shows how to apply a JMESPath expression to transform a JSON document into
            another JSON document.
            <code>
            using System;
            using System.Text.Json;
            using JsonCons.JmesPath;
            
            public class Example
            {
                public static void Main()
                {
               string jsonString = @"
            {
            ""people"": [
            {
              ""age"": 20,
              ""other"": ""foo"",
              ""name"": ""Bob""
            },
            {
              ""age"": 25,
              ""other"": ""bar"",
              ""name"": ""Fred""
            },
            {
             ""age"": 30,
             ""other"": ""baz"",
             ""name"": ""George""
            }
            ]
            }
               ";
            
               using JsonDocument doc = JsonDocument.Parse(jsonString);
            
               var transformer = JsonTransformer.Parse("people[?age > `20`].[name, age]");
            
               using JsonDocument result = transformer.Transform(doc.RootElement);
            
               var serializerOptions = new JsonSerializerOptions() {WriteIndented = true};
               Console.WriteLine("Filters and Multiselect Lists");
               Console.WriteLine(JsonSerializer.Serialize(result.RootElement, serializerOptions));
               Console.WriteLine();
            }
            </code>
            Output:
            
            <code>
            [
              [
                "Fred",
                25
              ],
              [
                "George",
                30
              ]
            ]
            </code>
            </example>
        </member>
        <member name="M:JsonCons.JmesPath.JsonTransformer.Parse(System.String)">
            <summary>
            Parses a JMESPath string into a <see cref="T:JsonCons.JmesPath.JsonTransformer"/>, for "parse once, use many times".
            A <see cref="T:JsonCons.JmesPath.JsonTransformer"/> instance is thread safe and has no mutable state.
            </summary>
            <param name="jmesPath">A JMESPath string.</param>
            <returns>A <see cref="T:JsonCons.JmesPath.JsonTransformer"/>.</returns>
            <exception cref="T:JsonCons.JmesPath.JmesPathParseException">
              The <paramref name="jmesPath"/> parameter is not a valid JMESPath expression.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              The <paramref name="jmesPath"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:JsonCons.JmesPath.JsonTransformer.Transform(System.Text.Json.JsonElement)">
            <summary>
            Applies a JMESPath expression to a JSON document to transform it
            into another Json document.
            </summary>
            <param name="doc">The provided JSON document.</param>
            <returns>The transformed JSON document.</returns>
        </member>
        <member name="M:JsonCons.JmesPath.JsonTransformer.Transform(System.Text.Json.JsonElement,System.String)">
            <summary>
            Applies a JMESPath expression to a JSON document to transform it
            into another Json document.
            This method parses and applies the expression in one operation.
            </summary>
            <param name="doc">The provided JSON document.</param>
            <param name="jmesPath">A JMESPath string.</param>
            <returns>The transformed JSON document.</returns>
        </member>
        <member name="T:JsonCons.JmesPath.ValueComparer">
            <summary>
            Compares two <see cref="T:JsonCons.JmesPath.IValue"/> instances.
            </summary>
        </member>
        <member name="P:JsonCons.JmesPath.ValueComparer.Instance">
            <summary>Gets a singleton instance of <see cref="T:JsonCons.JmesPath.ValueComparer"/>. This property is read-only.</summary>
        </member>
        <member name="M:JsonCons.JmesPath.ValueComparer.#ctor">
            <summary>
            Constructs a <see cref="T:JsonCons.JmesPath.ValueComparer"/>
            </summary>
        </member>
        <member name="M:JsonCons.JmesPath.ValueComparer.Compare(JsonCons.JmesPath.IValue,JsonCons.JmesPath.IValue)">
            <summary>
            Compares two <see cref="T:JsonCons.JmesPath.IValue"/> instances.
            
            If the two <see cref="T:JsonCons.JmesPath.IValue"/> instances have different data types, they are
            compared according to their Type property, which gives this ordering:
            <code>
               Undefined
               Object
               Array
               String
               Number
               True
               False
               Null
            </code>
            
            If both <see cref="T:JsonCons.JmesPath.IValue"/> instances are null, true, or false, they are equal.
            
            If both are strings, they are compared with the String.CompareTo method.
            
            If both are numbers, and both can be represented by a <see cref="T:System.Decimal"/>,
            they are compared with the Decimal.CompareTo method, otherwise they are
            compared as doubles.
            
            If both are objects, they are compared accoring to the following rules:
            
            <ul>
            <li>Order each object's properties by name and compare sequentially.
            The properties are compared first by name with the String.CompareTo method, then by value with <see cref="T:JsonCons.JmesPath.ValueComparer"/></li>
            <li> The first mismatching property defines which <see cref="T:JsonCons.JmesPath.IValue"/> instance is less or greater than the other.</li>
            <li> If the two sequences have no mismatching properties until one of them ends, and the other is longer, the shorter sequence is less than the other.</li>
            <li> If the two sequences have no mismatching properties and have the same length, they are equal.</li>
            </ul>  
            
            If both are arrays, they are compared element wise with <see cref="T:JsonCons.JmesPath.ValueComparer"/>.
            The first mismatching element defines which <see cref="T:JsonCons.JmesPath.IValue"/> instance is less or greater than the other.
            If the two arrays have no mismatching elements until one of them ends, and the other is longer, the shorter array is less than the other.
            If the two arrays have no mismatching elements and have the same length, they are equal.
            
            </summary>
            <param name="lhs">The first object of type cref="IValue"/> to compare.</param>
            <param name="rhs">The second object of type cref="IValue"/> to compare.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
              Unable to compare numbers as either <see cref="T:System.Decimal"/> or double (shouldn't happen.)
            </exception>
        </member>
    </members>
</doc>
