<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonCons.Utilities</name>
    </assembly>
    <members>
        <member name="T:JsonCons.Utilities.JsonElementEqualityComparer">
            <summary>
            Compares two <see cref="T:System.Text.Json.JsonElement"/> instances for equality by using value-based comparison.
            </summary>
        </member>
        <member name="T:JsonCons.Utilities.IntegerTokenHandling">
            <summary>
            Defines how the unflatten operation handles integer tokens in a JSON Pointer 
            </summary>
        </member>
        <member name="F:JsonCons.Utilities.IntegerTokenHandling.IndexOrName">
            <summary>
            The unflatten operation first tries to unflatten into a JSON array
            using the integer tokens as sequential indices, and if that fails, unflattens into
            a JSON object using the integer tokens as names.
            </summary>
        </member>
        <member name="F:JsonCons.Utilities.IntegerTokenHandling.NameOnly">
            <summary>
            The unflatten operation always unflattens into a JSON object
            using the integer tokens as names.
            </summary>
        </member>
        <member name="T:JsonCons.Utilities.JsonFlattener">
            <summary>
            Provides functionality to flatten a JSON object or array to a single depth JSON object of JSON Pointer-value pairs,
            and to unflatten a flattened JSON object.
            </summary>
            <example>
            This example shows how to flatten and unflatten a JSON value
            <code>
            using System;
            using System.Diagnostics;
            using System.Text.Json;
            using JsonCons.Utilities;
            
            public class Example
            {
               public static void Main()
               {
                   using var doc = JsonDocument.Parse(@"
                   {
                      ""application"": ""hiking"",
                      ""reputons"": [
                          {
                              ""rater"": ""HikingAsylum"",
                              ""assertion"": ""advanced"",
                              ""rated"": ""Marilyn C"",
                              ""rating"": 0.90
                           },
                           {
                              ""rater"": ""HikingAsylum"",
                              ""assertion"": ""intermediate"",
                              ""rated"": ""Hongmin"",
                              ""rating"": 0.75
                           }    
                       ]
                   }
                   ");
               
                   using JsonDocument flattened = JsonFlattener.Flatten(doc.RootElement);
               
                   var options = new JsonSerializerOptions() { WriteIndented = true };
               
                   Console.WriteLine($"{JsonSerializer.Serialize(flattened, options)}\n");
               
                   using JsonDocument unflattened = JsonFlattener.Unflatten(flattened.RootElement);
               
                   var comparer = JsonElementEqualityComparer.Instance;
                   Debug.Assert(comparer.Equals(unflattened.RootElement,doc.RootElement));
                }
            }
            </code>
            Output:
            <code>
            {
              "/application": "hiking",
              "/reputons/0/rater": "HikingAsylum",
              "/reputons/0/assertion": "advanced",
              "/reputons/0/rated": "Marilyn C",
              "/reputons/0/rating": 0.90,
              "/reputons/1/rater": "HikingAsylum",
              "/reputons/1/assertion": "intermediate",
              "/reputons/1/rated": "Hongmin",
              "/reputons/1/rating": 0.75
            }
            </code>
            </example>
        </member>
        <member name="M:JsonCons.Utilities.JsonFlattener.Flatten(System.Text.Json.JsonElement)">
            <summary>
            Converts a JSON object or array into a single depth JSON object of name-value pairs,
            such that the names are JSON Pointer strings, and the values are either string,
            number, true, false, null, empty object, or empty array. 
            </summary>
            <remarks>
            It is the users responsibilty to properly Dispose the returned JSONDocument value
            </remarks>
            <param name="value">The value to be flattened.</param>
            <returns>The flattened value</returns>
        </member>
        <member name="M:JsonCons.Utilities.JsonFlattener.Unflatten(System.Text.Json.JsonElement,JsonCons.Utilities.IntegerTokenHandling)">
            <summary>
            Recovers the orginal JSON value from a JSON object in flattened form, to the extent possible. 
            There may not be a unique solution, an integer token in a JSON Pointer could be an array index or 
            it could be an object name. The default behavior is to attempt to recover arrays. The <paramref name="options"/>
            parameter can be used to recover objects with integer names instead.
            </summary>
            <remarks>
            It is the users responsibilty to properly Dispose the returned JSONDocument value
            </remarks>
            <param name="flattenedValue">The flattened value, which must be a JSON object of name-value pairs, such that 
            the names are JSON Pointer strings, and the values are either string,
            number, true, false, null, empty object, or empty array.</param>
            <param name="options">Options for handling integer tokens in the JSON Pointer.</param>
            <returns>The unflattened value</returns>
            <exception cref="T:System.ArgumentException">
              The <paramref name="flattenedValue"/> is not a JSON object, or has a name that contains an invalid JSON pointer.
            </exception>
        </member>
        <member name="T:JsonCons.Utilities.JsonPatchException">
            <summary>
            Captures error message and the operation that caused it.
            </summary>
        </member>
        <member name="M:JsonCons.Utilities.JsonPatchException.#ctor(System.String,System.String)">
            <summary>
            Constructs a <see cref="T:JsonCons.Utilities.JsonPatchException"/>.
            </summary>
            <param name="operation">The operation that caused the error.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="P:JsonCons.Utilities.JsonPatchException.Operation">
            <summary>
            Gets the <see cref="T:System.String"/> that caused the error.
            </summary>
        </member>
        <member name="T:JsonCons.Utilities.JsonPatch">
            <summary>
            Provides functionality for applying a JSON Patch as 
            defined in <see href="https://datatracker.ietf.org/doc/html/rfc6902">RFC 6902</see>
            to a JSON value.
            </summary>
            <example>
            The following example borrowed from [jsonpatch.com](http://jsonpatch.com/) shows how to apply a JSON Patch to a JSON value
            <code>
            using System;
            using System.Diagnostics;
            using System.Text.Json;
            using JsonCons.Utilities;
            
            public class Example
            {
               public static void Main()
               {
                using var doc = JsonDocument.Parse(@"
            {
            ""baz"": ""qux"",
            ""foo"": ""bar""
            }
                ");
            
                using var patch = JsonDocument.Parse(@"
            [
            { ""op"": ""replace"", ""path"": ""/baz"", ""value"": ""boo"" },
            { ""op"": ""add"", ""path"": ""/hello"", ""value"": [""world""] },
            { ""op"": ""remove"", ""path"": ""/foo"" }
            ]
                ");
            
                using JsonDocument result = JsonPatch.ApplyPatch(doc.RootElement, patch.RootElement);
            
                var options = new JsonSerializerOptions() { WriteIndented = true };
            
                Console.WriteLine("The original document:\n");
                Console.WriteLine($"{JsonSerializer.Serialize(doc.RootElement, options)}\n");
                Console.WriteLine("The patch:\n");
                Console.WriteLine($"{JsonSerializer.Serialize(patch.RootElement, options)}\n");
                Console.WriteLine("The result:\n");
                Console.WriteLine($"{JsonSerializer.Serialize(result, options)}\n");
                   ");
                }
            }
            </code>
            The original document:
            
            <code>
            {
              "baz": "qux",
              "foo": "bar"
            }
            </code>
            
            The patch:
            <code>
            
            [
              {
                "op": "replace",
                "path": "/baz",
                "value": "boo"
              },
              {
                "op": "add",
                "path": "/hello",
                "value": [
                  "world"
                ]
              },
              {
                "op": "remove",
                "path": "/foo"
              }
            ]
            </code>
            
            The result:
            <code>
            {
              "baz": "boo",
              "hello": [
                "world"
              ]
            }
            </code>
            </example>
        </member>
        <member name="M:JsonCons.Utilities.JsonPatch.ApplyPatch(System.Text.Json.JsonElement,System.Text.Json.JsonElement)">
            <summary>
            Applies a JSON Patch as defined in <see href="https://datatracker.ietf.org/doc/html/rfc6902">RFC 6902</see> 
            to a source JSON value.
            <returns>The patched Json document.</returns>
            </summary>
            <remarks>
            It is the users responsibilty to properly Dispose the returned JSONDocument value
            </remarks>
            <param name="source">The source JSON value.</param>
            <param name="patch">The patch to be applied to the source JSON value.</param>
            <returns>The patched JSON value</returns>
            <exception cref="T:System.ArgumentException">
            The provided <paramref name="patch"/> is invalid 
            </exception>
            <exception cref="T:JsonCons.Utilities.JsonPatchException">
              A JSON Patch operation failed
            </exception>
        </member>
        <member name="M:JsonCons.Utilities.JsonPatch.FromDiff(System.Text.Json.JsonElement,System.Text.Json.JsonElement)">
            <summary>
            Builds a JSON Patch as defined in <see href="https://datatracker.ietf.org/doc/html/rfc6902">RFC 6902</see> 
            given two JSON values, a source and a target.
            </summary>
            <remarks>
            It is the users responsibilty to properly Dispose the returned JSONDocument value
            </remarks>
            <param name="source">The source JSON value.</param>
            <param name="target">The target JSON value.</param>
            <returns>A patch to convert the source JSON value to the target JSON value</returns>
        </member>
        <member name="T:JsonCons.Utilities.JsonPointer">
            <summary>
            Represents a JSON Pointer as defined by <see href="https://datatracker.ietf.org/doc/html/rfc6901">RFC 6901</see>
            </summary>
        </member>
        <member name="M:JsonCons.Utilities.JsonPointer.#ctor(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Constructs a JSON Pointer from a list of tokens 
            </summary>
        </member>
        <member name="M:JsonCons.Utilities.JsonPointer.ToString">
            <summary>
            Returns a string representing the JSON Pointer as a string value
            </summary>
        </member>
        <member name="M:JsonCons.Utilities.JsonPointer.ToUriFragment">
            <summary>
            Returns a string representing the JSON Pointer as a URI fragment identifier
            </summary>
        </member>
        <member name="M:JsonCons.Utilities.JsonPointer.TryGet(System.Text.Json.JsonElement,System.Text.Json.JsonElement@)">
            <summary>
            Evaluates this JSON Pointer on the provided target.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonCons.Utilities.JsonPointer.TryGet(System.Text.Json.JsonElement,System.String,System.Text.Json.JsonElement@)">
            <summary>
            Returns the value at the referenced location in the specified target.
            </summary>
            <param name="target"></param>
            <param name="jsonPointer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
